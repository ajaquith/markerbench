<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-05-16T15:39:48-04:00</updated><id>/feed.xml</id><title type="html">Markerbench</title><subtitle>This is the personal blog of Andrew Jaquith. My interests include security, anything mobile, app development, visualization, good writing and spirited discussion.</subtitle><entry><title type="html">Five Things the Last Decade Taught Me About Security Metrics</title><link href="/blog/2019/03/21/metricon-x-opening/" rel="alternate" type="text/html" title="Five Things the Last Decade Taught Me About Security Metrics" /><published>2019-03-21T00:00:00-04:00</published><updated>2019-03-21T00:00:00-04:00</updated><id>/blog/2019/03/21/metricon-x-opening</id><content type="html" xml:base="/blog/2019/03/21/metricon-x-opening/">&lt;p&gt;&lt;em&gt;This is the nominal text of my opening remarks for &lt;a href=&quot;https://www.securitymetrics.org/blog/2019/01/28/metricon-x-agenda/&quot;&gt;Metricon X&lt;/a&gt;, delivered on March 21, 2019. It has been lightly edited for clarity and a few identities have been slightly disguised. The views expressed in this speech do not necessarily reflect those of my present or past employers.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;welcome&quot;&gt;Welcome&lt;/h1&gt;

&lt;p&gt;I appreciate everybody coming today. It’s a great turnout for a conference that we rather deliberately did not advertise. If you’re here, it’s because you wanted to be here. You’ve self-selected.&lt;/p&gt;

&lt;p&gt;The theme of the conference is “plus ça change…,” the second half of which is “plus c’est la même chose.” Colloquially: “the more things change, the more they stay the same.” So what we’re really here to talk about are the constants and the change. But because I suspect that we will have ample time to reheat some of the old chestnuts (the constants), I’d like to offer a few remarks on the &lt;em&gt;changes&lt;/em&gt; — that is, notable happenings in the world of security metrics over the last 12 years.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;data-driven-security-took-root&quot;&gt;Data-driven security took root&lt;/h1&gt;

&lt;p&gt;One of the most gratifying things to emerge in security over the last 10-plus years is the increased fluency and comfort people have with real security data. This is not completely new. &lt;a href=&quot;http://www.cheswick.com/ches/&quot;&gt;Bill Cheswick&lt;/a&gt;’s work at Bell Labs in the late 1990s on network mapping, for example, helped create a company (&lt;a href=&quot;http://www.lumeta.com&quot;&gt;Lumeta&lt;/a&gt;) that specialized in analyzing networks, and developed a specialty in analytics for use in M&amp;amp;A situations. &lt;a href=&quot;https://www.linkedin.com/in/jameshcowie/&quot;&gt;Jim Cowie&lt;/a&gt;, formerly CTO of Renesys, as another example, was doing large-scale analytics on BGP routes at the turn of the millennium. The last dozen years has brought many more examples, notably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The Verizon Data Breach Investigations Report (DBIR)&lt;/strong&gt;, which fused together law-enforcement data and private sources to paint a data-rich picture of what data breaches look like, are caused by, and cost. The &lt;a href=&quot;https://enterprise.verizon.com/resources/reports/dbir/&quot;&gt;DBIR&lt;/a&gt;, and publications such as Larry Ponemon’s eponymous studies on breach costs, helped popularize a metric known as “cost per record.” As a result, we now have relatively well-accepted currency for calculating potential and actual consumer information exposures.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Observables and ratings&lt;/strong&gt;. Spurred on, in part, by the challenges of the the questionnaire-based approach to evaluating vendor security, vendors such as &lt;a href=&quot;www.bitsight.com&quot;&gt;BitSight&lt;/a&gt; and &lt;a href=&quot;securityscorecard.com&quot;&gt;Security Scorecard&lt;/a&gt; have focused on inferring the security of companies based on what they can empirically observe. If your MX and DNS records are messed up, or if spam is coming from IP address space you control, or if externally-facing systems appear to be compromised, then the rest of your security program probably isn’t any good either. Ratings are derived from how spotless one’s external presence is. Data about your supply base, for example, can help you make a decision about when need to dispatch the goon squad to interrogate a high-risk vendor.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The increased use of statistical and data science tools&lt;/strong&gt; to analyze large security data sets. These include Python (eg &lt;a href=&quot;https://pandas.pydata.org&quot;&gt;PANDAS&lt;/a&gt; and &lt;a href=&quot;https://www.numpy.org&quot;&gt;NumPy&lt;/a&gt;), and the &lt;a href=&quot;https://www.r-project.org&quot;&gt;R ecosystem&lt;/a&gt;, the &lt;a href=&quot;https://www.tidyverse.org&quot;&gt;HadleyVerse&lt;/a&gt; and so on. There are a healthy number of “R-heads” in the security metrics community, such as &lt;a href=&quot;https://www.linkedin.com/in/jayjacobs1/&quot;&gt;Jay Jacobs&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/hrbrmstr/&quot;&gt;Bob Rudis&lt;/a&gt; and many others. I count myself among them. Although many of the studies are custom-made, the prevailing attitude is to practice reproducible science using a tool-driven analysis and workflow. Find interesting problems and data sets. Explore them. Publish findings. Repeat!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And also, somewhere along the line, data science became a Thing. Some of us used to call it “statistics.” Speaking of which…&lt;/p&gt;

&lt;h1 id=&quot;ai-has-come-to-security-with-uneven-results&quot;&gt;“AI” has come to security, with uneven results&lt;/h1&gt;

&lt;p&gt;“AI” has come to security, with uneven results. I say “AI” in quotes because what we call AI in the popular press is not about endowing computing machines with cognition. I must tell you, every time I see that Microsoft commercial with the rapper Common extolling the virtues of “AI,” I feel like Marvin Minsky spins another turn in his grave, and that Douglas Hofstadter rips up and crumples one of his piano compositions and weeps.&lt;/p&gt;

&lt;p&gt;Once you get beyond the commercials, “AI” is primarily about creating models to make better predictions, using a bag of tricks that includes supervised and unsupervised learning, neural networks, bayesian strategies, Markov networks, bootstrapping, anomaly detection, and a whole set of other buzzwords that many of our attendees have better first-hand experience with than I.&lt;/p&gt;

&lt;p&gt;In security, many of these “AI” techniques are being put to use to help solve some very real operational security problems, for example, making a security operations team more efficient. Consider an enterprise-class SOC with dozens of analysts. The sensor grid will ingest daily log volumes in the tens of millions, extract tens of thousands of potentially suspicious activities, and then reduce these down to dozens of cases to put in front of human analysts. As a rule of thumb, it’s about roughly one million pieces of straw in every haystack, for each needle found in it.&lt;/p&gt;

&lt;p&gt;Financial services and national agencies are two types of organizations that have the threat volume, funding and organizational capability to fund vendor and internal efforts in this space. They have big haystacks and lots of needles to find. A large focus of research and vendor efforts is in increasing the signal-to-noise ratio. From a measurement perspective, this means using “AI” to correctly classify genuine intrusions (true positives) and non-intrusions (true negatives), and reduce the false-positive and false-negative rate.&lt;/p&gt;

&lt;p&gt;But results have been “uneven” because it’s a tough problem space. Many vendors will tell you that they’ve got bulletproof, universal techniques that solve all sorts of superficially related problems. For example, network intrusion detection and insurance fraud are both anomaly detection problems, right? I’ve heard a vendor say, “well, our AI/neural net/ML engine solves both of these problems.” Actually, they are in different domains and have very different characteristics in terms of variety of data sources, completeness, and outlier detection strategies. There is no one size fits all. I’m inherently suspicious of generalizable AI in security. But every time I see a well-bounded, domain specific strategy, I’m happy.&lt;/p&gt;

&lt;p&gt;In addition, there is lots of low-hanging fruit that can be harvested by simply fusing data together at the presentation level to make investigations more efficient. SOC labor optimization is more like an operations research problem than an “AI” problem. With respect to making SOCs more efficient, there’s plenty of room for experimentation at both ends of the funnel, by attacking the top and middle of the funnel to present the truest and most accurate incidents; and then, improving the efficiency of the investigations of the cases that fall through to the bottom of the funnel.&lt;/p&gt;

&lt;h1 id=&quot;success-disasters-are-great-teachers&quot;&gt;Success disasters are great teachers&lt;/h1&gt;

&lt;p&gt;Dr Dan Geer first introduced me to the concept of a “success disaster”; something that goes so well that it creates painful side-effects. Here in New York, you could argue that the &lt;a href=&quot;https://mic.com/articles/52843/the-cronut-craze-is-spiraling-out-of-control#.8QY5hj6NM&quot;&gt;cronut craze&lt;/a&gt; that began in 2013 was a success disaster for the Dominique Ansell Bakery. Sure, there were lines around of the block, but it led to a black market in resellable cronuts, counterfeit cronuts, quotas for cronuts, and I am sure, staff burnout and ingredient shortages. It was also a disaster for ordinary customers. If, for you, the Ansell Bakery had been a lovely place to have your morning French roast while leisurely enjoying a croissant, reading Le Monde and chain-smoking Galois cigarettes, it is no longer. That dream was trampled by all of the marauding tourists.&lt;/p&gt;

&lt;p&gt;In security metrics, it’s been gratifying to see a lot more focus on data, analytics and metrics. And many of the metrics I’ve been seeing are much better than the stuff that drove me batty when I wrote my book twelve years ago. You know, stuff like turning highs, mediums, lows into cardinal numbers like 5, 3, and 1, or (worse) 9, 3 and 1, and then doing math on them and claiming the results are “quanty.” Or creating an “index” that uses mystery math to jam a bunch of semi-related indicators into a score that can’t be easily explained, on the theory that because the Dow Jones Industrial average is an index, and we all know that a higher means we’re richer, then our security metric needs to be an index too. These are mistakes anybody can make, and usually do when they start off.&lt;/p&gt;

&lt;p&gt;Many organizations have matured their thinking and have gotten religion about measuring things. At a bank I’m familiar with, for example, the GRC team produces a 100-page monthly pack of metrics that cover all areas of technology risk. Many of the metrics count things things that risk or control owners consider important, typically trailing indicators, often with breakdowns by organizational units, and almost always with commentary and correct attribution about sources. The 1,000 or so metrics in this pack are assiduously collected every month and assembled into a polished report. This is wonderful. It is a success. It is also a disaster, because the quantity of data is challenging to assimilate. It is challenging to see the forest for the trees.&lt;/p&gt;

&lt;p&gt;Here’s another success disaster: vulnerability management. Everybody in the audience knows what a vulnerability scan is, and what it does. It finds weaknesses and exposures in technology assets, typically on endpoints such as servers and desktops. The tools have gotten very good and produce few false positives. What’s more, there’s a general consensus on an industry-wide rating scheme for measuring severity: the Common Vulnerability Scoring System (&lt;a href=&quot;https://www.first.org/cvss/&quot;&gt;CVSS&lt;/a&gt;). The market is mature, with well-established vendors such as &lt;a href=&quot;https://www.qualys.com&quot;&gt;Qualys&lt;/a&gt;, &lt;a href=&quot;https://www.rapid7.com&quot;&gt;Rapid7&lt;/a&gt; and &lt;a href=&quot;https://www.tenable.com&quot;&gt;Tenable&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What’s not to like about vulnerability scanners? They have a consistent measurement system, are accurate and pervasive. If the scanner says something is bad, it must be right? We should fix all “critical” vulnerabilities right away, shouldn’t we? Sounds great. But the problem is that there are too many darned vulnerabilities: millions in the typical large enterprise. What do you fix first? This is very much a success disaster.&lt;/p&gt;

&lt;p&gt;These kinds of problems are excellent teachers, because they force you to think differently about the problems. In the vulnerability management space, for example, one must begin with the concession that not all vulnerabilities are cost-effective to fix. Some matter more than others. How important is the asset they are on? And is the vulnerability weaponized? Are attackers actively exploiting the vulnerability in the wild? Both of these are tedious and error-prone processes to do as one-offs, but can be attacked with a bit of engineering. So now you have vendors such as &lt;a href=&quot;https://www.kennasecurity.com&quot;&gt;Kenna&lt;/a&gt; (founded by one of securitymetrics.org’s early members, &lt;a href=&quot;https://www.linkedin.com/in/bellis/&quot;&gt;Ed Bellis&lt;/a&gt;), applying logic over-the-top of the scanners you’re already using. Maybe you don’t need to fix 1 million vulnerabilities. Maybe this week, the only thing you worry about is the one-half of one percent of the vulns, or 5,000 patches relating to a single &lt;a href=&quot;https://cve.mitre.org&quot;&gt;CVE&lt;/a&gt; that other companies are seeing abused by scripted attacks. That is a nice win, even better than the proverbial 80/20.&lt;/p&gt;

&lt;p&gt;For coping with success disasters in areas such as risk and control issues, I tend to worry less about the overall numbers of issues, and focus more on the pockets of risk “debt” that aren’t being paid down. Suppose you’ve got 10,000 risk issues and control breaks on the books, across the whole company. That sounds like a lot, but only 250 of them are in your highest-severity bracket. What’s the best way to figure out which ones to attack?&lt;/p&gt;

&lt;p&gt;There are many ways to look at the data — for example, finding who has the largest number of high-severity issues, or those with the largest number of longest-aged ones. Mean-time-to-close is another. Personally, I like “velocity” as the right way to look at the problem. Who’s paying down debt fastest, and who’s letting it sit?&lt;/p&gt;

&lt;p&gt;I stole a metric from the warehousing industry called “turnover,” which is defined as the number of SKUs flowing through a warehouse, divided into the average inventory.   For example, Apple’s inventory turnover in 2017 was 60, meaning it sold through everything in its warehouses every 6 days.&lt;/p&gt;

&lt;p&gt;When adapted for issue turnover, we define it as the number of closed issues divided into the average inventory. You don’t get credit for issues you postpone or renew. So for example, if you start with 100 issues on Feb 1, and end with 120 on Feb 28th, that’s bad, right? But what if you closed 65, and added 85? That’s pretty good, because you closed half of your issues during the month. Your issue turnover is 0.5, or when expressed as an annualized figure means your inventory would turn over 6 times per year. That’s actually quite outstanding. Now imagine computing issue turnover by organizational unit and severity of issue. You’d see the high and low performers right away.&lt;/p&gt;

&lt;p&gt;This issue turnover metric works well because it is easy to understand and rewards the behaviors we want to see: paydown of issue debt. This is another example of how a success disaster causes us to evolve our thinking, and allows us to prioritize better.&lt;/p&gt;

&lt;h1 id=&quot;controls-instrumentation-offers-terrific-bang-for-the-buck&quot;&gt;Controls instrumentation offers terrific bang for the buck&lt;/h1&gt;

&lt;p&gt;When I joined a large investment bank as the MD for technology risk measurement and analytics, I was excited that I’d be able to put some of my ideas about security metrics into practice. I’d done a fair bit of metrics work on a smaller scale in prior roles, but the bank had both the commitment and the resources to do it properly. But what I found out quite quickly after coming in was that the primary use of “metrics” was in demonstrating controls conformance, chiefly for Sarbanes-Oxley and assurance régimes such as SSAE-18. Our biggest customer wasn’t the security organization — it was our external auditors. They needed our data to be able to show quantitatively that the key controls were working. Our second biggest customer was the finance organization, because they ran SOX, although they were less interested in the data than the results.&lt;/p&gt;

&lt;p&gt;The “sweet spot” for the continuous controls monitoring program was identity and authorization, which lies at the heart of technology risk management. “No privilege without identity. Approve all privileges. Remove them in a timely manner when roles change or someone leaves the firm.” These were well-instrumented operational processes with well-defined systems to tap for the data. Because we calculated control effectiveness at a very granular level, we could state with confidence whether a particular control was effective or not. We had the data to prove it. No arguments.&lt;/p&gt;

&lt;p&gt;A key insight the team had was to being applying a similar approach to a large annual process that many of you are intimately familiar with, the Risk and Control Self-Assessment (RCSA, or as my contact from the Fed calls it, the “ricksa”). If you’ve had the pleasure of doing one, it’s usually an annual exercise that touches the entire enterprise. Both business-managed and control-function-managed controls are included. Everybody does it a little differently, but the basic steps are similar: (1) define “assessment units” that will perform the risk and control assessments; (2) set up the ratings scales for assessing inherent and residual risk; (3) have each assessment unit assess their inherent risk; (4) have each control owner assess the controls that help reduce these risks; (5) synthesize the results, calibrate them, determine residual risk and roll everything up.&lt;/p&gt;

&lt;p&gt;All of this sounds nice in theory, but the defects in practice are known.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Because so many people are involved, RCSAs can’t be done regularly; at most, most organizations will do them once a year.&lt;/li&gt;
  &lt;li&gt;Because the ratings are subjective, a lot of time is spent “calibrating” and “challenging” to try to ensure that nobody lied particularly egregiously. And,&lt;/li&gt;
  &lt;li&gt;Because of time constraints and the lack of detailed empirical facts about the control environment, assessors must evaluate in a very coarse-grained way, perhaps, at a sub-line of business level at best. What this means is that a significant risk or control weakness affecting a particular asset is steamrollered over by the tyranny of averages.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In short, these RCSA exercises aren’t timely, objective or precise. So what good are they? Based on comments from practitioners, not much good at all. And the regulators know it, which is why they are quite openly fishing for alternative approaches.&lt;/p&gt;

&lt;p&gt;What we found was that applying the continuous controls monitoring strategy to RCSA offered a terrific bang for the buck. The key was to do it in a commercial way. For example, consider Dorian’s wonderful &lt;a href=&quot;https://unifiedcompliance.com&quot;&gt;Unified Compliance Framework&lt;/a&gt;, which offers a consistent and universal taxonomy of controls that can be mapped to every technology or cyber framework, regulation or statute. If you pick just three of these mandates, for example &lt;a href=&quot;https://www.iso.org/isoiec-27001-information-security.html&quot;&gt;ISO 27000&lt;/a&gt;, the EU’s General Data Protection Regulation (&lt;a href=&quot;https://gdpr-info.eu&quot;&gt;GDPR&lt;/a&gt;) and the &lt;a href=&quot;https://www.nist.gov/cyberframework&quot;&gt;NIST Cyber-Security Framework&lt;/a&gt;, UCF will tell you that you need something like 600 controls, with another 300–400 implied. You would never want to automate the measurement of that number of controls. That would not be commercial, and you’d never be done.&lt;/p&gt;

&lt;p&gt;Instead, why not pick the 50 technology controls that we know from experience offer the biggest risk reduction potential, and instrument just those? We developed a playbook, which went more-or-less like this: “hey subject matter experts, we think change management, software lifecycle, data quality, tech ops, asset management, intrusion detection etc etc are the most important risk areas. How would you define ‘success’ in these areas? What metrics can we agree on that describe success? Who owns the data?” And then: defining a project plan for sourcing, loading, transforming and refining the data, in waves, so that we can compute the metrics we agreed constitute success. As a sweetener, we bribed the data owners with free labor to get their data into the computing plant.&lt;/p&gt;

&lt;p&gt;There are some caveats:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The data is &lt;em&gt;never complete&lt;/em&gt;, but that’s ok, because it’s good enough to be indicative… and certainly better than “1-5 scales” that are based mostly on opinions leavened with a few facts.&lt;/li&gt;
  &lt;li&gt;The early results are &lt;em&gt;always ugly&lt;/em&gt;, but that’s ok, because un-instrumented controls are always ugly the first time one sees the data. But nobody ought to get fired if the data’s all new and the control implementers haven’t been given time to fully adopt or get their performance in shape.&lt;/li&gt;
  &lt;li&gt;And it &lt;em&gt;takes time&lt;/em&gt;, but that’s ok, especially if one sequences the plan to deliver quick wins first&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, having a rigorous plan to delivery incremental value of a small number of representative metrics makes assessment processes more timely, precise and objective. It’s important to keep the exercise limited to key controls that you can tangibly measure. And it is critical to keep reminding everybody about all of the cost and complexity that’s being removed — typically, millions of dollars of labor that is largely guesswork.&lt;/p&gt;

&lt;h1 id=&quot;audience-is-everything&quot;&gt;Audience is everything&lt;/h1&gt;

&lt;p&gt;People want data for different reasons. And people consume data differently. What might seem good to you might be Greek to someone else. As a rule, I believe that when we build exhibits and reports, we tend to condescend to the reader. We assume that if we don’t lard exhibits with lots of reds, yellows, and greens, the person who is reading it won’t get it. Or we use simple pie and bar charts that waste space and are not data-dense. I ranted about this in my book a long time ago, but it’s still true. I rarely see information graphics related to security metrics that are more complicated than one-dimensional, for example, categorical data displayed as a bar chart. This is understandable in many ways, because most information graphs used in high-volume reports don’t need to do too much. They’re not there because they provide a lot of diagnostic power. They are meant to just get a simple message out. But is the message even right? If you don’t know who your audience is and what they want, it can’t possibly be — and so you are forced to keep it simple. If you knew your audience better, you could take them along much further, with more relevant and powerful metrics.&lt;/p&gt;

&lt;p&gt;When I look at published metrics and exhibits, I ask five questions that have a simple mnemonic: A-B-C-D-E.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A is for &lt;em&gt;Audience&lt;/em&gt;. Do we know who we’re putting our metrics in front of? Do we know what they want?&lt;/li&gt;
  &lt;li&gt;B is for &lt;em&gt;Behaviors&lt;/em&gt;. If you’re looking at a chart of exhibit, what behaviors do I want the audience to change based on the inferences or conclusions in the data?&lt;/li&gt;
  &lt;li&gt;C: can I &lt;em&gt;Concisely&lt;/em&gt; and clearly communicate, in the simplest way possible, the data I that the audience will need to make…&lt;/li&gt;
  &lt;li&gt;D: …the &lt;em&gt;Decisions&lt;/em&gt; based on the data I put in front of them?&lt;/li&gt;
  &lt;li&gt;E: Lastly, does my data include commentary with an &lt;em&gt;Editorial&lt;/em&gt; voice that showcases my expertise and provides context to guide the audience to the decision?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because Audience is everything, you have to start there. That’s a key lesson I’ve learned personally over the last dozen years.&lt;/p&gt;

&lt;p&gt;Outside of the security field, I two relatively new disciplines have emerged as Things that people specialize in that relate to the question of Audience. The first is &lt;em&gt;data visualization&lt;/em&gt; as a discrete field of study, and a sub-field related to information dashboard design. For data visualization (or “data vis”), toolsets such as &lt;a href=&quot;https://www.tableau.com&quot;&gt;Tableau&lt;/a&gt;, &lt;a href=&quot;https://d3js.org&quot;&gt;D3&lt;/a&gt; and &lt;a href=&quot;https://ggplot2.tidyverse.org&quot;&gt;GGplot&lt;/a&gt; have turned visualization into a rich grammar that can be programmed, layered and reused. And websites like &lt;a href=&quot;https://informationisbeautiful.net&quot;&gt;Information Is Beautiful&lt;/a&gt; and &lt;a href=&quot;https://flowingdata.com&quot;&gt;Flowing Data&lt;/a&gt; celebrate novel ways of mashing up and showcasing data. &lt;a href=&quot;http://www.stephen-few.com&quot;&gt;Stephen Few&lt;/a&gt; has been doing pathbreaking work on dashboard design — I can’t recommend his work highly enough, because of the rigor with which he approaches make-overs of the sorts of dashboards that we are all showing our bosses. As security and risk professionals, we all benefit from the increasing formalism of the field of data visualization, and from efforts to promote more “visualization literacy.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Data journalism&lt;/em&gt; is the second Thing I’ve been following that benefits our field, and it too relates to Audience. Made mainstream by Nate Silver’s FiveThirtyEight &lt;a href=&quot;https://fivethirtyeight.com/tag/2018-election/&quot;&gt;election prediction work&lt;/a&gt;, nearly every premier news publication has invested in what is now called data journalism. Data journalists are either quants like Nate who happen to write persuasively, or data-curious journalists that got their Nerd on and developed a niche. The essence of data journalism is telling stories with data. Notable publications that are doing this really well include the &lt;a href=&quot;https://www.nytimes.com/section/upshot&quot;&gt;New York Times&lt;/a&gt;, which has been doing some extraordinary data journalism over the last ten years; &lt;a href=&quot;www.economist.com&quot;&gt;the Economist&lt;/a&gt;, which has always had excellent, honest, sound data graphics but has recently gone much deeper into analytics; and of course, the now-ESPN-owned &lt;a href=&quot;fivethirtyeight.com&quot;&gt;fivethirtyeight.com&lt;/a&gt;.  And academics such as &lt;a href=&quot;http://www.thefunctionalart.com&quot;&gt;Alberto Cairo&lt;/a&gt; are also doing incredible work in this space.&lt;/p&gt;

&lt;p&gt;A few years ago I made a highly speculative hire — I hired the head of the data journalism team from a major business publication. The theory was, we’ve got lots of data, but we’re doing a crap job telling the story. Let’s see if we can bring in someone with a hybrid skillset. She writes well, and fast — is used to writing on deadline. As a reporter, she’s got a nose for the headline. And she’s got data chops. Maybe not like a full-on data scientist would, but hey, give it time. It turned out she was exactly what we needed. It was a true win-win… the bank got a massive upgrade in clarity and impact. And my new team member was happy as a clam because by making the jump into financial services, we were also able to raise her compensation by a very healthy amount.&lt;/p&gt;

&lt;p&gt;The point I’m trying to make here is that the skills that made our data journalist such a valuable member of the team was, more-or-less, ABCDE. In short: knowing your audience, what they want, and what you want out of them. And then, constructing the simplest and most efficient narrative that encourages inquiry, while also making setting the stage for decisions that shape behavior.&lt;/p&gt;

&lt;p&gt;This talk was meant as a retrospective, so I could have talked about any number of things. I mentioned these five trends…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;data-driven security&lt;/li&gt;
  &lt;li&gt;“AI” in security&lt;/li&gt;
  &lt;li&gt;success disasters as teachers&lt;/li&gt;
  &lt;li&gt;controls instrumentation&lt;/li&gt;
  &lt;li&gt;audience focus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…because they represented topics that I’ve learned a lot about, and that have benefited the industry. Thanks for listening to this rather old-school speech — no slides — and I look forward to seeing what Metricon XX will bring.&lt;/p&gt;</content><author><name>arj</name></author><category term="featured" /><summary type="html">This is the nominal text of my opening remarks for Metricon X, delivered on March 21, 2019. It has been lightly edited for clarity and a few identities have been slightly disguised. The views expressed in this speech do not necessarily reflect those of my present or past employers.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/metricon-x-pano.jpg" /></entry><entry><title type="html">The Twenty-Year War on Cybercrime</title><link href="/blog/2015/06/06/gartner-speech/" rel="alternate" type="text/html" title="The Twenty-Year War on Cybercrime" /><published>2015-06-06T00:00:00-04:00</published><updated>2015-06-06T00:00:00-04:00</updated><id>/blog/2015/06/06/gartner-speech</id><content type="html" xml:base="/blog/2015/06/06/gartner-speech/">&lt;p&gt;&lt;em&gt;This is the text of a speech I delivered at the Gartner Group Security and Risk Management Summit in June 2015. I originally wrote the speech for Sir Roger Carr, the Chairman of BAE Systems, to use at one of his public appearances. But it was too good not to re-use for myself as the BAE Applied Intelligence’ strategy lead. I felt no shame in doing so, seeing that I’d written it…&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Good afternoon. Thank you for coming. It is a privilege to speak with you today. I’ve been asked to speak to you about digital crime: its rise, its significance, and what can be done about it.&lt;/p&gt;

&lt;p&gt;But I also know that I am the last thing between you and beer, so I will keep this talk as short and sweet as I can.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Certainly, “cyber security” (I hate that phrase, but there we are) is a topic that can be treated lightly, and it is ambitious to try and cover the whole subject in 20 minutes. Nonetheless. I will discuss the rise of digital crime: how criminal enterprises, state-sponsored actors, and other parties are robbing the industrialized world of its secrets and personal information. I’ll discuss the impact that these activities have on businesses, citizens and governments. And I’ll discuss what can be done from our perspective as BAE Systems, one of the world’s largest defense contractors and providers of digital crime solutions.&lt;/p&gt;

&lt;h2 id=&quot;introduce-self&quot;&gt;Introduce Self&lt;/h2&gt;

&lt;p&gt;But first, allow me to introduce myself and BAE Systems.&lt;/p&gt;

&lt;p&gt;I am the strategy officer for BAE Systems Applied Intelligence. I’m a recovering analyst; you might know me from, as they say on late-night TV, “another network,” in this case Forrester, where I covered data security and mobile security, and advised hundreds of enterprise clients on these topics, and on security strategy. I also wrote a fairly well-regarded book on security metrics called, funnily enough, “&lt;a href=&quot;https://www.amazon.com/Security-Metrics-Replacing-Uncertainty-Doubt/dp/0321349989&quot;&gt;Security Metrics&lt;/a&gt;.”&lt;/p&gt;

&lt;h2 id=&quot;introduce-bae&quot;&gt;Introduce BAE&lt;/h2&gt;

&lt;p&gt;Most of you probably know BAE Systems because of the work we do with the UK government and the Ministry of Defense. BAE’s role is to safeguard and enhance our customers’ vital interests. We have a robust defense business: we build aircraft such as the the Typhoon; we build, service and repair naval ships; we make land-based armaments, such as the Bradley Fighting Vehicle; and we are a key supplier to aerospace and defense companies worldwide.&lt;/p&gt;

&lt;p&gt;Most of you probably do &lt;em&gt;not&lt;/em&gt; know that we have a billion-dollar risk and security business, which we call &lt;em&gt;Applied Intelligence&lt;/em&gt;. We are probably the largest cyber-security company that you have never heard of. We have over 5,000 customers in many industries in three continents, with a concentration in financial services. We secure our customers’ intellectual property and their email; we detect fraud and reduce the cost of compliance; we help them identify and reduce their financial and reputational risks; we host their key collaboration services; and we monitor and defend their networks from intrusions.&lt;/p&gt;

&lt;p&gt;All of these activities give us a unique vantage point on the challenges of cyber-security, and on the problem of digital crime.&lt;/p&gt;

&lt;h1 id=&quot;the-rise-of-digital-crime&quot;&gt;The Rise of Digital Crime&lt;/h1&gt;

&lt;p&gt;First, let’s talk about the rise of digital crime: what it is, and what it means. When we speak about “digital crime” we mean the use of computers either as the main component of, or as an accessory to, criminal activities that result in financial gain or in competitive advantage. Broadly speaking, “digital crime” includes all dastardly deeds that span cyber-crime, financial crime, fraud, and insider activity. The common element is that unlike purely physical crimes — for example, pickpockets on a crowded subway car, these crimes rely on technology in some way.&lt;/p&gt;

&lt;p&gt;Increasingly, we see significant interplay between the different types of digital crime. Cyber is a key enabler of financial fraud, of healthcare fraud, and of the theft of industrial secrets. As reported by Scotland Yard in April 2014, &lt;a href=&quot;http://www.standard.co.uk/news/crime/seven-out-of-10-frauds-are-now-cyber-crimes-police-chief-warns-9297024.html&quot;&gt;seven out of ten financial fraud offenses involve cyber in some way&lt;/a&gt;. And because every part of society is becoming increasingly automated, instrumented, and network-connected, we expect that cyber will be involved in an increasingly large proportion of crimes over the next few years.&lt;/p&gt;

&lt;h2 id=&quot;two-types-of-threat-actors-nation-states-and-criminal-enterprises&quot;&gt;Two types of threat actors: nation-states and criminal enterprises&lt;/h2&gt;

&lt;p&gt;Today, digital crime is perpetrated by two main types of actors: nation-states and criminal enterprises. Many of the most important cyber incidents that you have no doubt read about over the last five years have involved &lt;em&gt;nation-states.&lt;/em&gt; These nation-states are engaged in state-sponsored hacking and industrial espionage on a grand scale. Two years ago, for example, US forensics firm Mandiant revealed that an elite hacking unit of the People’s Liberation Army was responsible for stealing industrial secrets from the U.S. defense industrial base, leading security software firms, and other businesses. More recently, North Korea stands accused of penetrating the networks of Sony Pictures to embarrass executives and steal intellectual property.&lt;/p&gt;

&lt;p&gt;The goal of these types of state-sponsored cyber activities is to obtain industrial secrets for sovereign advantage. The adversaries are advanced, persistent, and most certainly a threat.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Criminal enterprises&lt;/em&gt; present a danger of a different sort. Their goals are to obtain what one might call “toxic data”: payment card details; personal health information; and personally identifying information, such as pension and other government identifiers. This information is fungible, and can be sold on black markets for profit, or to commit identity theft — at which point it is used for fraudulent financial purposes.&lt;/p&gt;

&lt;p&gt;Some examples. Last year, the U.S. retailer Target suffered from a data breach that caused the payment card details of over 40 million customers to be stolen, plus the personal details of over 70 million additional customers. And last month, the healthcare company Anthem was breached, exposing millions of healthcare records. A Bloomberg report suggested that the &lt;a href=&quot;http://www.bloomberg.com/news/articles/2015-02-05/signs-of-china-sponsored-hackers-seen-in-anthem-attack&quot;&gt;real target of the Anthem breach were the employees of its customers&lt;/a&gt;, which included Northrop Grumman and Boeing. Attackers were in effect using weaknesses found in Anthem’s defenses to get to these other companies.&lt;/p&gt;

&lt;h2 id=&quot;the-advantages-attackers-have-over-defenders&quot;&gt;The advantages attackers have over defenders&lt;/h2&gt;

&lt;p&gt;Although both classes of attacker — state-sponsored actors and organized criminal enterprises — have different objectives, they have several things in common, which give them advantages over their targets, who must defend themselves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;First, both classes of adversary are supported by an &lt;em&gt;integrated criminal supply chain.&lt;/em&gt; The supply chain is fully stratified, with loose networks of cyber weapons suppliers, middle-men, intermediaries, distributors, and 24 x 7 support providers. The wheels of this supply chain are helpfully greased by digital currencies such as BitCoin, which enable the anonymous exchange of funds between buyers and sellers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Second: both classes of adversary are &lt;em&gt;highly creative&lt;/em&gt;, willing to use all means at their disposal. These means include hacking, lying, fraud, identity theft, infiltration, and compromising trusted suppliers. They also include the use of any and all channels: phone, cyber, wi-fi, in-person and physical.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Third: both depend on the fact that their victims’ &lt;em&gt;networks are increasingly far-flung, cloud based, and porous&lt;/em&gt;. With the advent of mobile, cloud, social networking, consumerization, and extended digital supply chains, companies must deal with exponentially more complexity in their networks than they did just ten years ago.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it gets worse. You may not know that that the &lt;em&gt;lingua franca&lt;/em&gt; of the Internet, the TCP and IP protocols, were never designed to be secure. They were designed to make the Internet resilient, to allow packets to flow to their destinations even when parts of the infrastructure were damaged. Every security protocol we have, was written — after the fact — to flow on top of those resilient, but insecure, protocols. Because security was never woven into the basic building blocks of the Internet, attackers inevitably find flaws in the ones we’ve fitted on top of them.&lt;/p&gt;

&lt;p&gt;Against such a backdrop, the adversary is always assured of asymmetric advantage. Defenders have to get it right all the time. Attackers, just once. To use a colloquial phrase, one might expect that for attackers, this should be rather like shooting fish in a barrel. And indeed it has been.&lt;/p&gt;

&lt;h1 id=&quot;the-impact-of-digital-crime&quot;&gt;The Impact of Digital Crime&lt;/h1&gt;

&lt;p&gt;The impact of digital crime is significant no matter how one chooses to measure it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The cost of digital crime begins with the &lt;em&gt;direct costs&lt;/em&gt;; the cost of cleanup, notifications to customers, and fines. Target stores has spent almost $150 million cleaning up after their data breach. Heartland Payments Systems, a payment processor, was breached in 2008 and had over a hundred million payment card details stolen, with direct costs from the breach totaling nearly $150 million, only 30 million of which was covered by insurance. In general, industry analysts estimate that breaches of customer information can cost victims — companies and customers — millions of dollars. But the criminals nearly always make a mint: the gangs that broke into Target, for example, &lt;a href=&quot;http://krebsonsecurity.com/2014/05/the-target-breach-by-the-numbers/&quot;&gt;may have made over 675 million dollars of profit&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The cost of digital crime includes the damage to the victim’s &lt;em&gt;reputation&lt;/em&gt;. A significant breach can cause significant personal embarrassment to executives and to customers. The co-chairman of Sony Pictures, for example, was forced resign last month because her company’s security was so poor. The CEO of Target stores resigned because of its hack. Security is indeed becoming a board level issue in the sense that people are getting fired because they don’t have enough of it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The cost of digital crime includes &lt;em&gt;changes in stock price and profits&lt;/em&gt; in the wake of a security breach, although these are usually temporary. Often overlooked are the inevitable class-action &lt;em&gt;lawsuits&lt;/em&gt; that arise against public companies after data breaches. The management of Heartland Payment Systems has spent over five years defending itself against 27 separate consumer and institutional class-action lawsuits.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, the cost of digital crime includes the &lt;em&gt;loss of trust&lt;/em&gt; of one’s customers. Once lost, it is often difficult to regain. This is particularly challenging with firms that sell to other businesses. In the Heartland case, after years of growing its merchant base at double-digit rates between 10 and 20 percent, in the 2 years following the breach, merchant growth went into reverse, dropping 2%.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(more examples here…)&lt;/p&gt;

&lt;p&gt;These costs — direct costs, damage to reputation, stock price and profit drops, lawsuits, and loss of trust — are significant costs for any individual organization to bear. Taken in aggregate, the near-continuous stream of bad news leads to a gradual erosion of trust in digital business in general.&lt;/p&gt;

&lt;h1 id=&quot;what-can-be-done&quot;&gt;What can be done&lt;/h1&gt;

&lt;p&gt;The problems associated with digital crime are complex. So are the solutions, but that is in part because of the way we as customers, suppliers and national governments have been thinking about the problem of digital crime. We need to think differently. We need to think deeply. And we need to think quickly.&lt;/p&gt;

&lt;h2 id=&quot;systems-thinking-not-silo-thinking&quot;&gt;Systems thinking, not silo thinking&lt;/h2&gt;

&lt;p&gt;First, we need to think about systems as a whole, and not about silos.&lt;/p&gt;

&lt;p&gt;To use an analogy, consider the West’s responses to various failed and successful hijacks of aircraft by terrorists. The first plots were revealed in 2006. A plot was foiled to detonate liquid explosives on 7 airplanes over the Atlantic. These explosives were peroxide-based and easily disguised in drinks bottles. After foiling the plot, the US and UK airline authorities duly banned bringing liquids through airport security. In September 2001, the 9/11 hijackers took control of airline cockpits using knives and box-cutters. Authorities duly prohibited knives and box-cutters on flights. Then, in December, show-bomber Richard Reid tried to set off a PETN-based bomb embedded in his shoe; the plot was foiled. Authorities duly forced passengers to remove their shoes.&lt;/p&gt;

&lt;p&gt;Security expert Bruce Schneier argues that none of these things have made any difference in minimizing the risk of hijackings. Only two things have: reinforcement of cockpit doors, and the fact that passengers are willing to fight back against attackers.&lt;/p&gt;

&lt;p&gt;Whether you agree with Bruce or not on this point, you can surely agree that the pattern used for preventing hijackings is “silo thinking”: looking for the artifacts used in the last attack and hoping that strategy will be effective in preventing the next one. Enumerating the &lt;em&gt;things&lt;/em&gt; that are bad, rather than spotting the &lt;em&gt;patterns&lt;/em&gt; that are bad.&lt;/p&gt;

&lt;p&gt;In cyber, we have been following a similar script. Consider the case of Target stores. Target suffered a horrendous breach; most people can appreciate the seriousness of that. What is less appreciated is that Target was compliant with the industry standard for security at the time of the hack: the Payment Card Industry’s Data Security Standard (PCI-DSS). By definition, Target owned and operated:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;anti-virus software&lt;/li&gt;
  &lt;li&gt;firewalls&lt;/li&gt;
  &lt;li&gt;intrusion detection systems, and:&lt;/li&gt;
  &lt;li&gt;log management software to filter through security device logs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these items are mandated by PCI-DSS and are required to be installed on systems that process cardholder data.&lt;/p&gt;

&lt;p&gt;In addition, the retailer also operated a security operations center in Minnesota. It had installed a $1.5 million advanced malware detection system, FireEye, which &lt;em&gt;did&lt;/em&gt; detect the malware that ultimately compromised its network.&lt;/p&gt;

&lt;p&gt;In short, Target could not possibly have been accused of skimping on security.&lt;/p&gt;

&lt;p&gt;What happened? Target’s failure came down to something fairly simple: the various silos of security did not talk to each other. Target’s advanced malware detection system saw the malware and created an alert. But the information was not acted on by Target’s staff. It was lost amidst the noise, or not presented in a relevant or timely way. Target did not arrive at the conclusions they needed to fast enough, which was not “you’ve got malware” but: “your point of sale systems are being taken over by a criminal enterprise.” In short, Target’s tragedy was the failure to think of its data sources, individual security systems, directories, suppliers and point-of-sale terminals as a single, interconnected system, and to attach relevance and meaning to the patterns of behavior seen within it.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;system&lt;/em&gt;, in the broad definition, is a set of connected technologies or processes that form a greater, more complex whole. Target thought it had a system in place, but it’s clear it only had silos: FireEye, the Bangalore team, the Security Operation Center in Minnesota, and many individual security technologies. When needed the most, they acted (or didn’t act) separately.&lt;/p&gt;

&lt;p&gt;When we rethink security, we must re-imagine security processes as an integrated whole. Systems thinking. To prevent and detect attacks, one must integrate all the elements — email, networks, physical, web, monitoring systems and many others. The components don’t all have to be from the same company, but they need to be integrated in such a way that the data flows seamlessly. Crucially, the information needs to be filtered and packaged so that it can be rapidly assessed, evaluated and acted on by human analysts.&lt;/p&gt;

&lt;h2 id=&quot;getting-the-full-picture-of-risk&quot;&gt;Getting the full picture of risk&lt;/h2&gt;

&lt;p&gt;Second, we need to think about the full picture of risk.&lt;/p&gt;

&lt;p&gt;Digital crime, particularly cyber crime, does not happen in a vacuum. Regardless of whether an attacker is trying to steal secrets, purloin personal information or launder lucre, nearly every type of digital crime can be reduced to a few common steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;The attacker must plan his “campaign”:&lt;/em&gt; perform reconnaissance, communicate with confederates, collect insider information, create exploits, or infiltrate a network of people.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;The attacker must commit his crime:&lt;/em&gt; break into a system, steal an identity, launch a denial of service attack, abuse administrator privileges, or use non-public information.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;The attacker must harvest his gains:&lt;/em&gt; purchase or sell goods, make fraudulent claims, sell secrets, or launder money.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Every method used in these steps generate some sort of tell-tale signal or artifact: a phone call, an entry in a log, a transaction, an intrusion alert, a payment or a sale.&lt;/p&gt;

&lt;p&gt;Appreciating the full picture of risk means having full knowledge, within the span of your control, of all of these artifacts. It means having the ability to sift through noise to find signal. It means acquiring, analyzing and acting on information at high speeds and at large scales. And it means having effective processes, technology and skills to spot anomalies, communicate them coherently, and act quickly.&lt;/p&gt;

&lt;h2 id=&quot;scaling-up&quot;&gt;Scaling up&lt;/h2&gt;

&lt;p&gt;Third, we need to scale up.&lt;/p&gt;

&lt;p&gt;The problems of digital crime are complex, critical and costly. I will explain this by way of example. Much of the work that we are inspired to do by our customers are multi-billion-pound problems, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First-party financial fraud costs institutions $18 billion a year globally&lt;/li&gt;
  &lt;li&gt;Intellectual property stolen from U.S. firms costs $300 billion every year&lt;/li&gt;
  &lt;li&gt;U.S. health care fraud costs insurers and the government nearly $75 billion annually, of which over $6 billion is cyber-related&lt;/li&gt;
  &lt;li&gt;Tax fraud globally is estimated at 5% of the total global economy: over $300 billion in the US and over $100 billion here in the UK&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What unites these problems is that they are sufficiently large to escape the grasp of any one company, institution, or government. Effective approaches must &lt;em&gt;necessarily&lt;/em&gt; be multi-company, industry-wide, and transnational in scope. For complex, critical and costly problems, only large-scale solutions will suffice.&lt;/p&gt;

&lt;p&gt;For example, here in the UK, we work with the Insurance Fraud Bureau. Software supplied by our Applied Intelligence unit analyzes every auto and property insurance claim submitted by every claimant in the country. This industry-wide capability has resulted in over 600 arrests and a large reduction in the amount of insurance fraud committed. This is not something that could work for a single insurer. This truly is a Big Data problem.&lt;/p&gt;

&lt;p&gt;Here in the United States, we are working with several state insurance agencies to reduce medical insurance fraud, again, as an industry-wide solution within each state. We provide essential network security services for nearly 15% of all American banking and credit union institutions. We monitor a quarter-million daily transactions processed by a New York-based clearing house, about $1.2 billion worth of instruments every day.&lt;/p&gt;

&lt;p&gt;These are all examples of how having a multi-company, transnational vantage helps solve industry-wide problems.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;The three strategies I’ve described — employing systems thinking, not silo thinking; getting the full picture of risk; and “scaling up” to span industries and international boundaries — are key to solving the complex, costly and critical problem of digital crime. But these items will not be sufficient in and of themselves. Because what we also need as businesses, as consumers and as society as a whole is a new mindset.&lt;/p&gt;

&lt;h2 id=&quot;the-risk-intelligence-mindset&quot;&gt;The risk intelligence mindset&lt;/h2&gt;

&lt;p&gt;The mindset we need to adopt is a more informed, intelligent approach to thinking about and managing risk: “risk intelligence” if you like. Not every plan to protect the business will be perfect. It is impossible to imagine a world in which there is no fraud, no theft, and no successful cyber-attacks. BAE might well wish it could sell silver bullets in addition to the conventional kind, but silver bullets do not exist.&lt;/p&gt;

&lt;p&gt;What I mean by “risk intelligence” is that customers have enough information to act, even in conditions of uncertainty. I mean that when customers’ most well-considered security and risk plans fail, they can still act decisively, and can make decisions appropriate for their businesses. Customers need to be able to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;quickly &lt;em&gt;acquire&lt;/em&gt; data about risks and threats at the highest level that could affect them and their customers;&lt;/li&gt;
  &lt;li&gt;effectively &lt;em&gt;analyze&lt;/em&gt; the data on hand to create information that can be put to use; and then:&lt;/li&gt;
  &lt;li&gt;decisively &lt;em&gt;act&lt;/em&gt; on that information to achieve better business outcomes: for example, reducing fraud, repelling cyber attacks, or rapidly responding to a break-in.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;learning-from-john-boyd&quot;&gt;Learning from John Boyd&lt;/h2&gt;

&lt;p&gt;There is a precedent for this type of thinking, and it comes courtesy of BAE’s main business, the military business. In the 1970s American military strategist Colonel John Boyd wrote about something called the “OODA loop,” which stands for Observe, Orient, Decide and Act. Boyd theorized that in combat conditions, one must:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Observe the enemy’s movements;&lt;/li&gt;
  &lt;li&gt;Orient oneself by creating a mental picture of the situation;&lt;/li&gt;
  &lt;li&gt;Decide on the courses of action available, and then:&lt;/li&gt;
  &lt;li&gt;Act decisively&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Boyd believed that the combatant who can observe, orient, decide and act fastest would win the battle. This means achieving the clearest and most accurate conception of battlefield position, and then taking action, as fast as possible. Boyd also believed that a combatant who can observe, orient, decide and act faster can overwhelm his adversary’s decision-making capability, achieving victory in a fraction of the time required by conventional warfare.&lt;/p&gt;

&lt;p&gt;That was why Hitler’s &lt;em&gt;blitzkrieg&lt;/em&gt; attacks were so effective. It is why the US-led Operation Desert Storm, for which Boyd was a key architect, was able to conquer Iraq — a country whose territory is nearly twice the size of the UK — in less than four days.&lt;/p&gt;

&lt;p&gt;It is also why digital crimes take days, months and years to detect. Adversaries are able to observe, orient, decide and act much more quickly than their victims.&lt;/p&gt;

&lt;p&gt;So, when we say that to properly combat digital crime, we need “risk intelligence,” we mean quickly acquiring data, effectively analyzing it, and decisively acting. In essence: speeding up customers’ own analytics and decision-making processes to match or exceed the speed of the adversary.&lt;/p&gt;

&lt;h2 id=&quot;result-make-customers-jobs-easier&quot;&gt;Result: make customers’ jobs easier&lt;/h2&gt;

&lt;p&gt;Imagine a world where risk intelligence becomes the norm. Done right, our customers’ jobs become simpler. Today, the Chief Information Security Officer’s role in most organizations is to catalog all of the vulnerabilities in the environment; prioritize them; and then serially eliminate them one after the other. He or she buys many best-of-breed products to solve many narrow problems. Along the way, he or she writes policies that few people read, and some business unit owners actually regard as harmful. He or she spends valuable staff time answering hundreds of pesky audit questionnaires. That is the day job.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The after-hours job&lt;/em&gt; is what happens when the company is actually compromised or subjected to fraud or attack. In these circumstances, the Security Officer scrambles, dodges, and weaves before making the best of a bad situation. Because policy is prioritized over speed of decision-making, the Security Officer is always caught by surprise.&lt;/p&gt;

&lt;p&gt;In future, the Chief Information Security Officer’s job will be measured not by the pound — that is, by the weight of policies produced and purchase orders placed. It will be measured instead by the tick — that is, by the number of ticks of the clock between when the adversary initially acts, and when he or she is able to acquire, analyze and act in response, or &lt;em&gt;in advance&lt;/em&gt; of the adversary’s next move.&lt;/p&gt;

&lt;h2 id=&quot;parting-thought&quot;&gt;Parting thought&lt;/h2&gt;

&lt;p&gt;I will close with a quote from Sir Winston Churchill:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Want of foresight, unwillingness to act when action would be simple and effective, lack of clear thinking, confusion of counsel until the emergency comes, until self-preservation strikes its jarring gong - these are the features which constitute the endless repetition of history.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us learn from history.&lt;/p&gt;

&lt;p&gt;Thank you for your time and attention today.&lt;/p&gt;</content><author><name>arj</name></author><category term="sticky" /><category term="featured" /><summary type="html">This is the text of a speech I delivered at the Gartner Group Security and Risk Management Summit in June 2015. I originally wrote the speech for Sir Roger Carr, the Chairman of BAE Systems, to use at one of his public appearances. But it was too good not to re-use for myself as the BAE Applied Intelligence’ strategy lead. I felt no shame in doing so, seeing that I’d written it…</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/johnboyd.jpg" /></entry><entry><title type="html">The DevOps Security Handbook: Building Security In With Chef, Part III</title><link href="/blog/2013/10/06/chef-3rd-course/" rel="alternate" type="text/html" title="The DevOps Security Handbook&amp;#58; Building Security In With Chef, Part III" /><published>2013-10-06T20:15:00-04:00</published><updated>2013-10-06T20:15:00-04:00</updated><id>/blog/2013/10/06/chef-3rd-course</id><content type="html" xml:base="/blog/2013/10/06/chef-3rd-course/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;This is the third in a series of occasional posts about security and DevOps. The ultimate goal of this series is to show how to build a reasonably secure Apache web server using the popular DevOps automation tool &lt;a href=&quot;http://www.opscode.com/chef/&quot;&gt;Chef&lt;/a&gt;. The server will be suitable for serving static content such as that generated by &lt;a href=&quot;http://octopress.org&quot;&gt;OctoPress&lt;/a&gt;. Each post explores a new aspect of Chef.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you read the &lt;a href=&quot;/blog/2013/10/01/chef-starter/&quot;&gt;first&lt;/a&gt; and &lt;a href=&quot;/blog/2013/10/03/chef-2nd-course/&quot;&gt;second&lt;/a&gt; posts in this series, you learned how to set up the Chef workstation and server; created &lt;code class=&quot;highlighter-rouge&quot;&gt;webserver&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; roles; created a test environment and a virtual machine; and built a partially hardened server called &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;. This server has a minimized Apache configuration, and a restricted OpenSSH configuration.&lt;/p&gt;

&lt;p&gt;In this post, I will demonstrate one of the most challenging aspects of any server automation project: copying sensitive keying materials, such as SSL private keys, to server nodes. Although SSL certificates themselves are not sensitive,  certificate private keys are. In order to use Chef to truly “build security in,” these materials must be securely conveyed from the Chef server to the target server nodes. To do this, you will use Chef’s encrypted data bag feature and an add-on feature called &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-vault&lt;/code&gt;. You will create a custom cookbook recipe that performs all of the necessary decryption and file-creation actions on the target node. At the end of this post, you will possess a repeatable, reliable and secure method for conveying SSL keying materials or other secrets to target nodes.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;generate-self-signed-ssl-certificate&quot;&gt;Generate self-signed SSL certificate&lt;/h1&gt;
&lt;p&gt;To use SSL with your webserver, you must have an SSL certificate. In production environments, you will likely use a certificate signed by a public certificate authority, such as VeriSign, Thawte, or GoDaddy. But you can also use a self-signed certificate, which you will do here. At the command line, change to your &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-repo/.chef&lt;/code&gt; directory. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl genrsa -aes128 -out tester.local.key-with-password 2048
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This creates a 2048-bit RSA key and wraps it with 128-bit key secured by a password. You should see output similar to the following (and will be prompted to enter a password):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Generating RSA private key, 2048 bit long modulus
........+++
..+++
e is 65537 (0x10001)
Enter pass phrase for tester.local.key-with-password:
Verifying - Enter pass phrase for tester.local.key-with-password:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In most situations it isn’t desirable to have a password protecting the actual key file, because when you start Apache, it will block until the password is entered. If you have a large-scale infrastructure, you don’t want to type in passwords every time some random server starts up. (As a compensating control — later on in this post — you will make the key file accessible only to &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;.) To ensure that Apache starts cleanly, let’s remove the password. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl rsa -in tester.local.key-with-password -out tester.local.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enter the password when prompted. A new key file &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local.key&lt;/code&gt; will be created. Remove the old password-protected key file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm tester.local.key-with-password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, generate a certificate signing request (CSR). Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl req -new -key tester.local.key -out tester.local.csr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enter data used in the certificate: country name, state, locality, organization name, OU name, common name, and email address, as shown in the sample output below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:Massachusetts
Locality Name (eg, city) []:Boston
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Markerbench
Organizational Unit Name (eg, section) []:SSL Test Certificate Directorate
Common Name (e.g. server FQDN or YOUR name) []:tester.local
Email Address []:nobody@markerbench.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Most of the fields are mandatory, but only one really matters: the common name. This must match the name of the webserver host; in this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The CSR will be written to &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local.csr&lt;/code&gt;. After it is created, create a self-signed certificate by typing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl x509 -req -days 365 -in tester.local.csr -signkey tester.local.key -out tester.local.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see this output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Signature ok
subject=/C=US/ST=Massachusetts/L=Boston/O=Markerbench/OU=SSL Test Certificate Directorate/CN=tester.local/emailAddress=nobody@markerbench.com
Getting Private key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The certificate will be written to &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local.pem&lt;/code&gt;. You can verify the certificate contents by using OpenSSL’s &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl x509 -in tester.local.crt -noout -text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see output similar to this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Certificate:
Data:
    Version: 1 (0x0)
    Serial Number:
        90:aa:b2:e4:06:ca:50:32
    Signature Algorithm: sha1WithRSAEncryption
    Issuer: C=US, ST=Massachusetts, L=Boston, O=Markerbench, OU=SSL Test Certificate Directorate, CN=tester.local/emailAddress=nobody@markerbench.com
    Validity
        Not Before: Oct  5 21:05:32 2013 GMT
        Not After : Oct  5 21:05:32 2014 GMT
    Subject: C=US, ST=Massachusetts, L=Boston, O=Markerbench, OU=SSL Test Certificate Directorate, CN=tester.local/emailAddress=nobody@markerbench.com
    Subject Public Key Info:
        Public Key Algorithm: rsaEncryption
        RSA Public Key: (2048 bit)
            Modulus (2048 bit):
                00:c4:3b:79:55:78:15:c2:82:a6:e3:e9:f0:64:c7:
                …(content omitted)
                56:e1:57:0d:b0:e0:37:31:19:ee:31:95:8f:2f:a6:
                c3:3b
            Exponent: 65537 (0x10001)
Signature Algorithm: sha1WithRSAEncryption
    1e:a6:1a:27:d3:5d:08:bc:ad:00:df:4e:6a:5b:4c:a4:be:80:
    …(content omitted)
    23:0e:02:be:3e:e8:89:75:58:03:7d:70:ac:13:a3:f4:d5:02:
    2e:d8:58:7f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Congratulations. You have created a self-signed certificate called &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local.pem&lt;/code&gt; in the local directory, and a corresponding private key file &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local.key&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;installing-chef-vault-for-distributing-secrets&quot;&gt;Installing Chef-vault for distributing secrets&lt;/h1&gt;
&lt;p&gt;With the certificate and private key created, the next challenge is to use Chef to copy these two files to the correct locations on the web server. SSL certificates are stored at &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssl/certs&lt;/code&gt;; private keys are stored at &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssl/private&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are many ways to convey the SSL certificate and key to the webserver. The easiest way would be to include these files in a cookbook as file resources, then use a recipe to copy them to the correct locations on the server. That is easy, but not very  secure because the keying materials would be stored as part of the cookbook, and therefore in the clear. (The Git source tree contains your cookbooks and all of their supporting files. If the SSL private key were checked in as an unencrypted regular file, other people would be able to see it.)&lt;/p&gt;

&lt;p&gt;It would be much nicer to store the SSL private key in an encrypted form — somehow — so that it can be copied to the server without worrying about who sees it (an attacker would just see ciphertext). After it is copied the server note, it can be decrypted in-place and moved to the correct destination in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssl/private&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Chef has some tools that make conveying secret materials easier. It provides a construct called a &lt;a href=&quot;http://docs.opscode.com/essentials_data_bags.html&quot;&gt;data bag&lt;/a&gt; for storing custom configuration items and other materials that target nodes need. Data bags are essentially hash maps (otherwise known as associative arrays, or in Rubyspeak, “hashes”) that are stored on the Chef server and retrieved by target nodes when &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client&lt;/code&gt; runs. Data bags items can be encrypted. To encrypt a data bag item, you pass an symmetric encryption key (or password) to the &lt;code class=&quot;highlighter-rouge&quot;&gt;knife data bag create&lt;/code&gt; command. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife data bag create certs tester_local_key --secret-file /tmp/my_secret_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…where &lt;code class=&quot;highlighter-rouge&quot;&gt;my_secret_key&lt;/code&gt; is a secret key generated, for example, by OpenSSL. To decrypt the item on target nodes, the target nodes perform an equivalent decryption operation, passing in the same secret key used to originally encrypt the item.&lt;/p&gt;

&lt;p&gt;Go back and re-read that last paragraph. See anything problematic? &lt;em&gt;Nodes that need to decrypt the data bag item need the the secret key used to encrypt it&lt;/em&gt;. That might sound obvious, but the it raises a question: how does the secret key actually get copied to the nodes? The Chef documentation is silent about how this is done; it leaves the problem of key management as an exercise for the reader. We are left to assume that the secret key is “somehow” copied to the target nodes.&lt;/p&gt;

&lt;p&gt;How should this be done? You could copy the secret key using a Chef recipe, but you’d have the same problem all over again — sensitive keying material would be exposed. You could, instead, copy the secret key manually to the node over SSH, but that defeats the whole point of Chef — automation of configuration tasks.&lt;/p&gt;

&lt;p&gt;It would be much nicer if there was a way to encrypt sensitive materials without requiring lots of complicated key management. Sadly, Chef does not provide such a method. However, a clever programmer named Kevin Moser, who works for Nordstrom, has created Chef plugin called &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-vault&lt;/code&gt; that solves the key management problem rather elegantly.&lt;/p&gt;

&lt;p&gt;Kevin’s &lt;a href=&quot;https://github.com/Nordstrom/chef-vault&quot;&gt;chef-vault&lt;/a&gt; tool takes a clever approach. Chef-vault uses a type of &lt;a href=&quot;http://en.wikipedia.org/wiki/Key_encapsulation&quot;&gt;key encapsulation&lt;/a&gt; to protect secret materials using the public keys of target nodes that need them. These public keys are the same ones the nodes use to authenticate to Chef. Because these keys must, by definition, already exist, using them for encryption creates no extra work for you. Essentially, Chef-vault’s &lt;code class=&quot;highlighter-rouge&quot;&gt;encrypt&lt;/code&gt; operation does the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Creates a symmetric encryption key (“secret key”). This secret key encrypts the plaintext (the thing you want to encrypt), and creates a ciphertext.&lt;/li&gt;
  &lt;li&gt;Adds the ciphertext to the data bag.&lt;/li&gt;
  &lt;li&gt;For each target node, encrypts the secret key with the node’s public key, creating an encapsulated key blob. The same operation is repeated for authorized users using their public keys as well&lt;/li&gt;
  &lt;li&gt;Adds each encapsulated key blob to the data bag&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result of Chef-vault’s &lt;code class=&quot;highlighter-rouge&quot;&gt;encrypt&lt;/code&gt; operation is a data bag that contains an encrypted item for the secret being protected, and, for each authorized user and target node, an encrypted data blob that allows each user or node (and &lt;em&gt;only&lt;/em&gt; that user or node) to recover the encryption key and, thus, decrypt the encrypted item. Chef-vault (essentially) extends Chef’s data bag structures to use its own public-key encryption system so that secret keys can be conveyed securely to target nodes. This rather neatly solves the secret-key distribution problem.&lt;/p&gt;

&lt;p&gt;Enough talk. Let’s install &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-vault&lt;/code&gt;. Normally, you would use the Ruby command &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install chef-vault&lt;/code&gt; to install it. However, as of this writing, only &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-vault&lt;/code&gt; version 2.1 has the ability to encrypt entire files. That ability is missing in the version of &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-vault&lt;/code&gt; in the Gem repositories. So you must build it yourself using the latest version from Github.&lt;/p&gt;

&lt;p&gt;At the command line, change to a directory outside of your &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-repo&lt;/code&gt; directory. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/Nordstrom/chef-vault.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see output similar to this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cloning into 'chef-vault'...
remote: Counting objects: 667, done.
remote: Compressing objects: 100% (343/343), done.
remote: Total 667 (delta 324), reused 619 (delta 279)
Receiving objects: 100% (667/667), 107.30 KiB | 0 bytes/s, done.
Resolving deltas: 100% (324/324), done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change to the new &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-vault&lt;/code&gt; directory and build the Gem:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd chef-vault
gem build chef-vault.gemspec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see output similar to this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WARNING:  no homepage specified
WARNING:  description and summary are identical
  Successfully built RubyGem
  Name: chef-vault
  Version: 2.1.0
  File: chef-vault-2.1.0.gem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-vault&lt;/code&gt; by typing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install chef-vault-2.1.0.gem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ruby will report successful installation as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Successfully installed chef-vault-2.1.0
1 gem installed
Installing ri documentation for chef-vault-2.1.0...
Installing RDoc documentation for chef-vault-2.1.0...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;creating-an-encrypted-vault-for-the-ssl-certificate-and-key&quot;&gt;Creating an encrypted vault for the SSL certificate and key&lt;/h1&gt;
&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-vault&lt;/code&gt; installed, you can now use it to encrypt sensitive materials and convey them securely to nodes. As an example, let’s encrypt the SSL certificate file. Change back to the &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-repo&lt;/code&gt; directory. Type the following, where &lt;em&gt;username&lt;/em&gt; is your Chef username:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife encrypt create certs tester_local_pem --mode client --file .chef/tester.local.pem -A &quot;username&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This Knife &lt;code class=&quot;highlighter-rouge&quot;&gt;encrypt&lt;/code&gt; command tells &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-vault&lt;/code&gt; to encrypt the contents of file &lt;code class=&quot;highlighter-rouge&quot;&gt;.chef/tester.local.pem&lt;/code&gt; (the SSL certificate) and to authorize the user &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; to decrypt or update its contents. You can use any valid Chef username, or multiple usernames separated by commas. (If you need to find out your Chef username is, type &lt;code class=&quot;highlighter-rouge&quot;&gt;knife user list&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;The contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;encrypt&lt;/code&gt; operation are added to a vault named &lt;code class=&quot;highlighter-rouge&quot;&gt;certs&lt;/code&gt;. The vault is backed by a data bag with the same name. You can verify that the data bag &lt;code class=&quot;highlighter-rouge&quot;&gt;certs&lt;/code&gt; exists by typing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife data bag list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see the data bag &lt;code class=&quot;highlighter-rouge&quot;&gt;certs&lt;/code&gt; in the list. You can see the items added to the data bag via the &lt;code class=&quot;highlighter-rouge&quot;&gt;knife data bag show&lt;/code&gt; command. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife data bag show certs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see the following items:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tester_local_pem
tester_local_pem_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first item, &lt;code class=&quot;highlighter-rouge&quot;&gt;tester_local_pem&lt;/code&gt; is a hash that contains the encrypted contents of the file. The second item, &lt;code class=&quot;highlighter-rouge&quot;&gt;tester_local_pem_keys&lt;/code&gt;, is a hash containing the list of authorized nodes, users and their associated public-key-encrypted blobs.&lt;/p&gt;

&lt;p&gt;Take a look at the encrypted file contents. The command for viewing data bag items is &lt;em&gt;knife data bag show name-of-data-bag name-of-item&lt;/em&gt;. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife data bag show certs tester_local_pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see output similar to the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file-content:
  cipher:         aes-256-cbc
  encrypted_data: QpB63Qv2650jwmWfj3IX4iXAIoGz8WZkggoV+wbLyI0T4nUivD5QBovdjtJU
  YkhI9QOrbW55HVwew7tLW+ee0cetjZm+Amaa0Gyo8ehBsTbRAeY3jkdWv8Ia
  …
  (content omitted)
  …
  jGAUa+xcdDedmBSiRxoUwrjSq85hnAGwmKovXqKZeK4=
  
  iv:             kOrZ5kIrTCmwRloUodCtgA==
  
  version:        1
file-name:
  cipher:         aes-256-cbc
  encrypted_data: kEL5rHzmx85diXKC1AL7EXdEID+SC1E58GuNFBeu9lK1k+Bv5GbcQXK/iDtS
  L8tQ
  
  iv:             xEhV676bjE4SwVYZZwkFtw==
  
  version:        1
id:           tester_local_pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the &lt;code class=&quot;highlighter-rouge&quot;&gt;file_content&lt;/code&gt; hash key contains the a child hash containing the cipher (AES-256-CBC), initialization vector, and the encrypted data blob. The &lt;code class=&quot;highlighter-rouge&quot;&gt;file-name&lt;/code&gt; hash key contains similar data that corresponds to the original file name (which is also encrypted).&lt;/p&gt;

&lt;p&gt;Let’s look at the encryption keys. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife data bag show certs tester_local_pem_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see output similar to the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;admins:  arj
arj:     SDqZuaFrpy28YOSDDhkyDmDBLPZHuRSDXjOgHklnaetDjl8QI7zuTvznmg1Q
…
(content omitted)
…
f+s7gdSVBZ0el7Uc9gDhOFZA0hz0ADqcIPd2hA90PQ==

clients:
id:      tester_local_pem_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, the &lt;code class=&quot;highlighter-rouge&quot;&gt;admins&lt;/code&gt; entry’s value is &lt;code class=&quot;highlighter-rouge&quot;&gt;arj&lt;/code&gt;, indicating that the user &lt;code class=&quot;highlighter-rouge&quot;&gt;arj&lt;/code&gt; is authorized to decrypt or update the contents. The &lt;code class=&quot;highlighter-rouge&quot;&gt;arj&lt;/code&gt; entry contains the secret key, encrypted with &lt;code class=&quot;highlighter-rouge&quot;&gt;arj&lt;/code&gt;’s public key. Of course, instead of seeing &lt;code class=&quot;highlighter-rouge&quot;&gt;arj&lt;/code&gt; you will see your own username. Note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;clients&lt;/code&gt; entry is empty because no nodes are authorized to decrypt yet.&lt;/p&gt;

&lt;p&gt;You can decrypt the secret by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;knife decrypt&lt;/code&gt; command. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife decrypt certs tester_local_pem file-content --mode client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command decrypts the payload stored in the key path &lt;code class=&quot;highlighter-rouge&quot;&gt;tester_local_pem&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;file-content&lt;/code&gt; in data bag &lt;code class=&quot;highlighter-rouge&quot;&gt;certs&lt;/code&gt;. Because your Chef user is an authorized user, you should be able to see the decrypted content. It starts with the string &lt;code class=&quot;highlighter-rouge&quot;&gt;-----BEGIN CERTIFICATE-----&lt;/code&gt;. Compare the output to the contents of the file &lt;code class=&quot;highlighter-rouge&quot;&gt;.chef/tester.local.pem&lt;/code&gt;; the contents should be identical.&lt;/p&gt;

&lt;p&gt;At this point, only one party (your Chef user) is authorized to decrypt the certificate. Of course, the web server needs to be authorized also! To authorize more users or nodes after the original &lt;code class=&quot;highlighter-rouge&quot;&gt;knife encrypt create&lt;/code&gt; operation, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;knife encrypt update&lt;/code&gt; command. In this case, you want to authorize the &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt; node that will actually use the SSL certificate. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife encrypt update certs tester_local_pem --mode client --file .chef/tester.local.pem -S &quot;name:tester.local&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can examine the contents of the data bag by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;knife data bag show certs tester_local_pem&lt;/code&gt; again. If you do that, you will see that the contents of the data bag item are much the same as before, although the initialization vector &lt;code class=&quot;highlighter-rouge&quot;&gt;file-content&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;iv&lt;/code&gt; and encrypted data blocks &lt;code class=&quot;highlighter-rouge&quot;&gt;encrypted_data&lt;/code&gt; are different. That is because the vault has re-encrypted the contents with different keys.&lt;/p&gt;

&lt;p&gt;Examine the &lt;code class=&quot;highlighter-rouge&quot;&gt;tester_local_pem_keys&lt;/code&gt; entry. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife data bag show certs tester_local_pem_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see that the contents of this entry are now a little different:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;admins:       arj
arj:          SDqZuaFrpy28YOSDDhkyDmDBLPZHuRSDXjOgHklnaetDjl8QI7zuTvznmg1Q
…(content omitted)
f+s7gdSVBZ0el7Uc9gDhOFZA0hz0ADqcIPd2hA90PQ==

clients:      tester.local
id:           tester_local_pem_keys
tester.local: y7DM7oQZj9+Yd5oRLFA4eSVOZ/+g/NYUNjfMJvsxxd1Nv85yLigzjb1JlaYm
…(content omitted)
yYWtFXX47765NivPGNTszfJQ8igNNBy1+YvfQn/wNw==
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see that the &lt;code class=&quot;highlighter-rouge&quot;&gt;clients&lt;/code&gt; entry contains the value &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;, and that a corresponding encrypted data blob named &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt; has been added. Splendid!&lt;/p&gt;

&lt;p&gt;With the certificate correctly added to the vault, let’s add the  private key. Instead of doing a two-step process of creating the encrypted data items and &lt;em&gt;then&lt;/em&gt; authorizing the node, let’s do it in one step by supplying both the user and node to the &lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt; operation. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife encrypt create certs tester_local_key --mode client --file .chef/tester.local.key -A &quot;arj&quot; -S &quot;name:tester.local&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Substitute your own username instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;arj&lt;/code&gt;, of course.&lt;/p&gt;

&lt;p&gt;If you want to, you can verify that the SSL private key was added successfully by typing the now-familiar &lt;code class=&quot;highlighter-rouge&quot;&gt;knife data bag show certs tester_local_key&lt;/code&gt; command.&lt;/p&gt;

&lt;h1 id=&quot;creating-a-cookbook-for-configuring-ssl&quot;&gt;Creating a cookbook for configuring SSL&lt;/h1&gt;
&lt;p&gt;At this point you have added the SSL certificate and its corresponding private key to the encrypted data vault &lt;code class=&quot;highlighter-rouge&quot;&gt;certs&lt;/code&gt;. Now you need to get the vault’s contents over to the target nodes so you can create the certificate and private key files.&lt;/p&gt;

&lt;p&gt;First, create a new cookbook called &lt;code class=&quot;highlighter-rouge&quot;&gt;ssl-config&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife cookbook create ssl-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the new cookbook to the &lt;code class=&quot;highlighter-rouge&quot;&gt;webserver&lt;/code&gt; role so that it is executed whenever &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client&lt;/code&gt; runs:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife role edit webserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the recipe for &lt;code class=&quot;highlighter-rouge&quot;&gt;ssl-config&lt;/code&gt; to the role by editing the &lt;code class=&quot;highlighter-rouge&quot;&gt;run_list&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;run_list&quot;: [
  &quot;recipe[apt]&quot;,
  &quot;recipe[apache2]&quot;,
  &quot;recipe[ssl-config]&quot;
],
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, edit the default recipe file &lt;code class=&quot;highlighter-rouge&quot;&gt;ssl-config/recipes/default.rb&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chef_gem 'chef-vault'
require 'chef-vault'

directory '/etc/ssl/certs' do
  recursive true
  owner 'root'
  group 'root'
  mode '0755'
end

directory '/etc/ssl/private' do
  owner 'root'
  group 'root'
  mode '0700'
end

# Certificate entries equal to hostname but with _ replaced by .
vault         = 'certs'
hostname      = node['fqdn']
cert_prefix   = hostname.sub('.','_')
cert_cert     = &quot;#{cert_prefix}_pem&quot;
cert_key      = &quot;#{cert_prefix}_key&quot;
cert_chain    = &quot;#{cert_prefix}_chain&quot;
puts &quot;Creating certificates for #{hostname} using vault #{vault}.&quot;

# Decrypt certificate
puts &quot;Decrypting certificate from hash item #{cert_cert}.&quot;
begin
  item = ChefVault::Item.load(vault,cert_cert)
  file &quot;/etc/ssl/certs/ssl-cert-snakeoil.pem&quot; do
    owner 'root'
    group 'root'
    mode '0444'
    content item['file-content']
  end
rescue ChefVault::Exceptions::KeysNotFound
  raise ChefVault::Exceptions::ItemNotFound,
    &quot;Certificate not found at #{vault}/#{cert_cert}!&quot;
end

# Decrypt certificate chain
puts &quot;Decrypting certificate chain.&quot;
begin
  item = ChefVault::Item.load(vault,cert_chain)
  file &quot;/etc/ssl/certs/#{hostname}.chain&quot; do
    owner 'root'
    group 'root'
    mode '0444'
    content item['file-content']
  end
rescue ChefVault::Exceptions::KeysNotFound
  Chef::Log.warn(&quot;No certificate chain in #{vault}/#{cert_chain}.&quot;)
end

# Decrypt private key
puts &quot;Decrypting key from hash item #{cert_key}.&quot;
begin
  item = ChefVault::Item.load(vault,cert_key)
  file &quot;/etc/ssl/private/ssl-cert-snakeoil.key&quot; do
    owner 'root'
    group 'root'
    mode '0400'
    content item['file-content']
  end
rescue ChefVault::Exceptions::KeysNotFound
  raise ChefVault::Exceptions::ItemNotFound,
    &quot;Private key not found at #{vault}/#{cert_key}!&quot;
end

# Configure the SSL default site if enabled
apache_site &quot;default-ssl&quot; do
  enable node['apache']['default_site_enabled']
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There might appear to be a lot going on in this recipe, but it is actually quite simple. First, the &lt;code class=&quot;highlighter-rouge&quot;&gt;chef_gem&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; lines tell the target node’s Chef client to download the &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-vault&lt;/code&gt; Gem.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;directory '/etc/ssl/certs' do&lt;/code&gt; block creates the directory that should contain the SSL certificate &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssl/certs&lt;/code&gt; if it does not already exist. Directory ownership is changed to &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; and it is made world-readable.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;directory '/etc/ssl/private' do&lt;/code&gt; block creates the directory that should contain the SSL private key &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssl/private&lt;/code&gt; if it does not already exist. Directory ownership is changed to &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; and it is made readable only by root.&lt;/p&gt;

&lt;p&gt;The next part of the recipe assigns variables used for looking up and decrypting the node’s certificate, private key and certificate chain. The key names for these items are equal to the fully-qualified domain name of the node with periods escaped as underscores, plus the &lt;code class=&quot;highlighter-rouge&quot;&gt;_pem&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_key&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;_chain&lt;/code&gt; suffixes, respectively. For example, for your test VM &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt; these values are &lt;code class=&quot;highlighter-rouge&quot;&gt;tester_local_pem&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;tester_local_key&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;tester_local_chain&lt;/code&gt;. (In case you were wondering: that is why the &lt;code class=&quot;highlighter-rouge&quot;&gt;knife encrypt create&lt;/code&gt; commands you typed earlier created items named &lt;code class=&quot;highlighter-rouge&quot;&gt;tester_local_pem&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tester_local_key&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;The next three code blocks (each beginning with the comment &lt;code class=&quot;highlighter-rouge&quot;&gt;# Decrypt&lt;/code&gt;) actually decrypt the file contents and save them to files. Let’s look the first of these.&lt;/p&gt;

&lt;p&gt;In the first decryption block, the line &lt;code class=&quot;highlighter-rouge&quot;&gt;ChefVault::Item.load(vault,cert_cert)&lt;/code&gt; decrypts the certificate object and assigns the result to the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;item&lt;/code&gt;. The value of &lt;code class=&quot;highlighter-rouge&quot;&gt;item&lt;/code&gt; will be a hash. The next 6 lines that begin with &lt;code class=&quot;highlighter-rouge&quot;&gt;file &quot;/etc/ssl/certs/ssl-cert-snakeoil.pem&quot; do&lt;/code&gt; create the certificate file, assign ownership to root, make it world-readable, and set the contents to &lt;code class=&quot;highlighter-rouge&quot;&gt;item&lt;/code&gt;’s hash entry named &lt;code class=&quot;highlighter-rouge&quot;&gt;file-content&lt;/code&gt;. Note that all of this code is enclosed in a begin/rescue/end block, so that the &lt;code class=&quot;highlighter-rouge&quot;&gt;ChefVault::Exceptions::KeysNotFound&lt;/code&gt; exception can be trapped. &lt;code class=&quot;highlighter-rouge&quot;&gt;ChefVault::Item.load&lt;/code&gt; throws this exception if the vault does not contain the expected entry, in this case one whose key is &lt;code class=&quot;highlighter-rouge&quot;&gt;tester_local_pem&lt;/code&gt;. If the entry is not found (for example, because you forgot to add the certificate to the vault), the recipe will throw and exception and fail — as it should.&lt;/p&gt;

&lt;p&gt;The second decryption block decrypts and saves the certificate chain, if one was added to the vault. Because &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;’s SSL certificate was self-signed, it does not need a certificate chain. However, in production situations you might have one, and if you do, you can ensure that it is copied to the server by adding it to vault using the usual &lt;code class=&quot;highlighter-rouge&quot;&gt;knife encrypt create&lt;/code&gt; command and specifying an item named &lt;em&gt;nodename_chain&lt;/em&gt;, where &lt;em&gt;nodename&lt;/em&gt; is the escaped form of the fully-qualified domain name (periods replaced by underscores). Unlike the first decryption block, however, the recipe does not crash and burn if the certificate chain item is not found. Instead, the recipe simply warns that no chain was found.&lt;/p&gt;

&lt;p&gt;The third decryption block decrypts and saves the private key. As with the first decryption block, the recipe fails if the key’s expected entry is not found in the vault.&lt;/p&gt;

&lt;p&gt;The last block turns on the &lt;code class=&quot;highlighter-rouge&quot;&gt;default-ssl&lt;/code&gt; site in Apache, which is preconfigured to use the various &lt;em&gt;ssl_snakeoil&lt;/em&gt; certificate files and private keys.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ssl-config&lt;/code&gt; recipe is fairly bare-bones, but sufficiently flexible that it will work with any SSL-enabled web server node. As discussed above, all you must do is (1) ensure that the node’s SSL certificate and private key are added to the vault correctly, and (2) configure the node’s run-list so that it executes the &lt;code class=&quot;highlighter-rouge&quot;&gt;ssl-config&lt;/code&gt; recipe.&lt;/p&gt;

&lt;h1 id=&quot;copying-ssl-certificates-to-the-server&quot;&gt;Copying SSL certificates to the server&lt;/h1&gt;
&lt;p&gt;With all of the prep work out of the way, it is time to finally configure the server. Upload the &lt;code class=&quot;highlighter-rouge&quot;&gt;ssl-config&lt;/code&gt; cookbook to the Chef server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife cookbook upload ssl-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SSH into &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once in, run &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo su
chef-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Many console messages will scroll past you at a dizzying pace. Look for these lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Recipe: ssl-config::default
…
Creating certificates for tester.local using vault certs.
Decrypting certificate from hash item tester_local_pem.
Decrypting certificate chain.
[2013-10-06T23:29:50+00:00] WARN: No certificate chain in certs/tester_local_chain.
Decrypting key from hash item tester_local_key.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These indicate that the recipe worked as expected. If there is a problem finding or decrypting the certificate or private key, the output will show an exception. Assuming the recipe ran successfully, the output will also contain lines showing that the certificate and private key files were created also. Look for lines similar to these, which shows the certificate file was created:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- create new file /etc/ssl/certs/ssl-cert-snakeoil.pem
- update content in file /etc/ssl/certs/ssl-cert-snakeoil.pem from none to 53f4ae
    --- /etc/ssl/certs/ssl-cert-snakeoil.pem	2013-10-06 23:29:51.663590528 +0000
    +++ /tmp/.ssl-cert-snakeoil.pem20131006-9127-hmw8o1	2013-10-06 23:29:51.667592528 +0000
    @@ -0,0 +1,23 @@
    +-----BEGIN CERTIFICATE-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…and these, which shows the private key file was created:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- create new file /etc/ssl/private/ssl-cert-snakeoil.key
- update content in file /etc/ssl/private/ssl-cert-snakeoil.key from none to 60fcbe
    --- /etc/ssl/private/ssl-cert-snakeoil.key	2013-10-06 23:29:51.727622527 +0000
    +++ /tmp/.ssl-cert-snakeoil.key20131006-9127-m9p4zk	2013-10-06 23:29:51.731624527 +0000
    @@ -0,0 +1,27 @@
    +-----BEGIN RSA PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the recipe runs, you can verify the files were correctly created by &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt;-ing the files &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssl/certs/ssl-cert-snakeoil.pem&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssl/private/ssl-cert-snakeoil.key&lt;/code&gt;. The files should be owned by &lt;code class=&quot;highlighter-rouge&quot;&gt;root/root&lt;/code&gt;; permissions should be restricted to 444 and 400, respectively.&lt;/p&gt;

&lt;h1 id=&quot;testing-the-webserver&quot;&gt;Testing the webserver&lt;/h1&gt;
&lt;p&gt;To test that the webserver is working as it should, we need to do two more things: edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;webserver&lt;/code&gt; role to enable SSL and the default site. Then, we re-push the cookbook and restart the server.&lt;/p&gt;

&lt;p&gt;First, edit the role as follows using the usual command &lt;code class=&quot;highlighter-rouge&quot;&gt;knife role edit webserver&lt;/code&gt;. As shown below, add SSL as an enabled module by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;ssl&quot;,&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;default_modules&lt;/code&gt; array, and turn set the &lt;code class=&quot;highlighter-rouge&quot;&gt;default_site_enabled&lt;/code&gt; value to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;override_attributes&quot;: {
    &quot;apache&quot;: {
      &quot;allow_override&quot;: &quot;None&quot;,
      &quot;contact&quot;: &quot;nobody@example.com&quot;,
      &quot;default_modules&quot;: [
        &quot;alias&quot;,
        &quot;cgi&quot;,
        &quot;deflate&quot;,
        &quot;dir&quot;,
        &quot;log_config&quot;,
        &quot;logio&quot;,
        &quot;mime&quot;,
        &quot;rewrite&quot;,
        &quot;ssl&quot;,
        &quot;setenvif&quot;
      ],
      &quot;default_site_enabled&quot;: true,
....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, enable port 443 in the &lt;code class=&quot;highlighter-rouge&quot;&gt;listen_ports&lt;/code&gt; section:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &quot;listen_ports&quot;: [
        &quot;80&quot;,
        &quot;443&quot;
      ],
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;, run &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client&lt;/code&gt; as root again and watch the node converge using these new settings.&lt;/p&gt;

&lt;p&gt;Then, open your browser to &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt; using regular HTTP. You should see a page that screams &lt;strong&gt;It works!&lt;/strong&gt;. Try using HTTPS; you should see the same message (and likely after getting an SSL warning about an untrusted certificate).&lt;/p&gt;

&lt;h1 id=&quot;save-your-work&quot;&gt;Save your work&lt;/h1&gt;
&lt;p&gt;You are done. Back up your nodes, roles, data bags and environments from the Chef server to your local workstation. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife backup export
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see the following output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Backing up nodes
Backing up nodes tester.local
Backing up roles
Backing up roles base
Backing up roles webserver
Backing up data bags
Backing up data bag certs item tester_local_key
Backing up data bag certs item tester_local_key_keys
Backing up data bag certs item tester_local_pem
Backing up data bag certs item tester_local_pem_keys
Backing up environments
Backing up environments testing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, edit &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-repo&lt;/code&gt; directory so that your SSL certificate and private key are not stored in Git. Add this line somewhere near the top (for example, underneath the line &lt;code class=&quot;highlighter-rouge&quot;&gt;.chef/*.pem&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.chef/*.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, commit your work. You can see what files were modified with the usual command &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;; if you do, you will see that some new files have been added:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.chef/chef_server_backup/data_bags/certs/
cookbooks/ssl-config/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see that a few have also been modified. Commit everything:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -am &quot;DevOps Secuity Handbook Part 3&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Remember, the keying materials (the *.key and *.pem files in the .chef directory) are not versioned in your Git repository. This is both a feature and a bug. You can safely move the &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local.pem&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local.key&lt;/code&gt; files to offline media now, if you wish; they are safely encrypted in the data bag &lt;code class=&quot;highlighter-rouge&quot;&gt;certs&lt;/code&gt; and no longer need to be in the local filesystem.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;next-adding-custom-content&quot;&gt;Next: Adding custom content&lt;/h1&gt;
&lt;p&gt;If you have completed the instructions in this post, you learned how to do some very useful things. You created a self-signed SSL certificate and private key for &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;. You installed the &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-vault&lt;/code&gt; plugin for storing the SSL certificate and private key as encrypted data bag items. You authorized the user &lt;code class=&quot;highlighter-rouge&quot;&gt;arj&lt;/code&gt; and node &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt; to decrypt these items. And you created a cookbook that decrypts the certificate, private key and certificate chain and creates files in the correct locations on the server.&lt;/p&gt;

&lt;p&gt;In the next post, you will use Chef to configure Apache for serving custom content. You will create a non-privileged user whose home directory stores static HTML. This directory will be served up by Apache as the default website. In keeping with the SSH configuration introduced in this post, the user account will be configured to use SSH public keys for authentication rather than passwords.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was updated July 22, 2015 to change the naming convention for SSL certificate files on the target box. It also added a short section that enables the default normal and SSL sites, as well as a short section for testing the actual SSL configuration.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image copyright 2016 by Kharnagy, licensed under the Creative Commons Attribution-Share Alike 4.0 International license.&lt;/em&gt;&lt;/p&gt;</content><author><name>arj</name></author><summary type="html">Introduction This is the third in a series of occasional posts about security and DevOps. The ultimate goal of this series is to show how to build a reasonably secure Apache web server using the popular DevOps automation tool Chef. The server will be suitable for serving static content such as that generated by OctoPress. Each post explores a new aspect of Chef.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/512px-Devops-toolchain.png" /></entry><entry><title type="html">The DevOps Security Handbook: Building Security In With Chef, Part II</title><link href="/blog/2013/10/03/chef-2nd-course/" rel="alternate" type="text/html" title="The DevOps Security Handbook&amp;#58; Building Security In With Chef, Part II" /><published>2013-10-03T13:30:00-04:00</published><updated>2013-10-03T13:30:00-04:00</updated><id>/blog/2013/10/03/chef-2nd-course</id><content type="html" xml:base="/blog/2013/10/03/chef-2nd-course/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;This is the second in a series of occasional posts about security and DevOps. The ultimate goal of this series is to show how to build a reasonably secure Apache web server using the popular DevOps automation tool &lt;a href=&quot;http://www.opscode.com/chef/&quot;&gt;Chef&lt;/a&gt;. The server I am describing how to build will be suitable for serving static content. Readers of this blog know that I am a fan of static blogging tools like &lt;a href=&quot;http://octopress.org&quot;&gt;Octopress&lt;/a&gt;, which I use to generate this website.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you read the &lt;a href=&quot;/blog/2013/10/01/chef-starter/&quot;&gt;first post in this series&lt;/a&gt;, you learned how to set up the Chef workstation and server account. You created an Apache server role and a test environment; set up a virtual machine; and built your first node. In this post, I will show you how to create a new role called &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; that includes security enhancements to OpenSSH. You will also fine-tune Apache to remove non-essential modules.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;tightening-the-apache-configuration&quot;&gt;Tightening the Apache configuration&lt;/h1&gt;
&lt;p&gt;To recap, in the last post I described how to create a sample virtual machine called &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;, onto which Chef installed the Apache 2 web server. If you were (as they say in the game-show world) “playing along at home,” you created a sample role called &lt;code class=&quot;highlighter-rouge&quot;&gt;webserver&lt;/code&gt; that caused the &lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; packages to be installed on the node &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;. You also bootstrapped the node so that it converged into the desired state.&lt;/p&gt;

&lt;p&gt;As a refresher, let’s review a few details from last time. In your &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-repo&lt;/code&gt; directory, at the command line type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife role edit webserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see something that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;webserver&quot;,
  &quot;description&quot;: &quot;Web server for my.org&quot;,
  &quot;json_class&quot;: &quot;Chef::Role&quot;,
  &quot;default_attributes&quot;: {
  },
  &quot;override_attributes&quot;: {
    &quot;apache&quot;: {
      &quot;listen_ports&quot;: [ &quot;80&quot; ]
    }
  },
  &quot;chef_type&quot;: &quot;role&quot;,
  &quot;run_list&quot;: [
    &quot;recipe[apt]&quot;,
    &quot;recipe[apache2]&quot;
  ],
  &quot;env_run_lists&quot;: {
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This configuration works just fine, of course. It sets up Apache with the usual defaults. Lots of modules are enabled, and a default website is configured automatically. For demonstrations, that might be dandy. But in production situations, you should tighten up the configuration so that it is more secure. Security professionals know, as a general rule, that when something has fewer configured options, it is usually more secure. In that spirit, let’s:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Minimize the attack surface by removing Apache modules we don’t need&lt;/li&gt;
  &lt;li&gt;Decrease the amount of information “leaked” by the server by turning off server tokens and signatures&lt;/li&gt;
  &lt;li&gt;Increase server performance by eliminating HTTP keep-alives&lt;/li&gt;
  &lt;li&gt;Remove the default server website&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have tried to do these things in the past, you probably wrote shell-code or some other kind of custom script. Or perhaps, like me, painstakingly hand-tuned the server and wrote down all of your specific hardening steps in a notebook in case you needed to do it again. The genius of Chef’s &lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt; cookbook is that you no longer have to do those things. The &lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt; cookbook recipes are cleverly written; they allow Apache to be heavily customized without requiring you to write code. Nearly everything that Apache does (or should &lt;em&gt;not&lt;/em&gt; do) can be controlled through &lt;em&gt;attributes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Attributes and their values can be defined in cookbooks via &lt;em&gt;attribute files&lt;/em&gt; and within recipes. They can also be defined for individual roles or environments. When attributes are defined in more than one place, those defined for specific environments beat those defined for roles, which in turn beat those defined in cookbooks.&lt;/p&gt;

&lt;p&gt;Attribute values can also have multiple priorities. In reverse order of precedence, these are &lt;em&gt;default&lt;/em&gt;, &lt;em&gt;force default&lt;/em&gt;, &lt;em&gt;normal&lt;/em&gt;, &lt;em&gt;override&lt;/em&gt;, &lt;em&gt;force override&lt;/em&gt; and &lt;em&gt;automatic&lt;/em&gt; priority types. That is, the default attributes are used unless there are force-default, override, force-override or automatic values supplied somewhere; force-default attributes apply unless normal, override, force-override or automatic values are found, and so on. The precedence rules are fairly complex; OpsCode’s documentation &lt;a href=&quot;http://docs.opscode.com/essentials_cookbook_attribute_files.html&quot;&gt;discusses them at length&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this case, you will define a several &lt;em&gt;override&lt;/em&gt; attributes that will take precedence over the default values defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt; recipes. When &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client&lt;/code&gt; runs on the target node &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;, these overridden values will be used in the various recipes to produce a more secure web server.&lt;/p&gt;

&lt;p&gt;At the console, type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife role edit webserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the editor screen, modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;webserver&lt;/code&gt; role so that it looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;webserver&quot;,
  &quot;description&quot;: &quot;Web server for my.org&quot;,
  &quot;json_class&quot;: &quot;Chef::Role&quot;,
  &quot;default_attributes&quot;: {
  },
  &quot;override_attributes&quot;: {
    &quot;apache&quot;: {
      &quot;allow_override&quot;: &quot;None&quot;,
      &quot;contact&quot;: &quot;nobody@example.com&quot;,
      &quot;default_modules&quot;: [
        &quot;alias&quot;,
        &quot;cgi&quot;,
        &quot;deflate&quot;,
        &quot;dir&quot;,
        &quot;log_config&quot;,
        &quot;logio&quot;,
        &quot;mime&quot;,
        &quot;rewrite&quot;,
        &quot;setenvif&quot;
      ],
      &quot;default_site_enabled&quot;: false,
      &quot;directory_index&quot;: &quot;disabled&quot;,
      &quot;directory_options&quot;: &quot;None&quot;,
      &quot;ext_status&quot;: false,
      &quot;keepalive&quot;: &quot;Off&quot;,
      &quot;keepaliverequests&quot;: &quot;100&quot;,
      &quot;keepalivetimeout&quot;: &quot;15&quot;,
      &quot;listen_ports&quot;: [
        &quot;80&quot;
      ],
      &quot;serversignature&quot;: &quot;Off&quot;,
      &quot;servertokens&quot;: &quot;Prod&quot;,
      &quot;timeout&quot;: &quot;120&quot;,
      &quot;traceenable&quot;: &quot;Off&quot;
    }
  },
  &quot;chef_type&quot;: &quot;role&quot;,
  &quot;run_list&quot;: [
    &quot;recipe[apt]&quot;,
    &quot;recipe[apache2]&quot;
  ],
  &quot;env_run_lists&quot;: {
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The hash named &lt;code class=&quot;highlighter-rouge&quot;&gt;apache&lt;/code&gt; (inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;override_attributes&lt;/code&gt; hash), contains the attributes that modify how the Apache is configured. If you are familiar with Apache configuration files, you can probably guess what many of the attributes do. In order, the override values tell Apache to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;allow_override&lt;/code&gt;: Prevents &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; files placed in content directories from &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#allowoverride&quot;&gt;overriding any directives&lt;/a&gt; already in place for the directory&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contact&lt;/code&gt;: Sets the &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#serveradmin&quot;&gt;contact email address&lt;/a&gt; printed on Apache error pages to a bogus address&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;default_modules&lt;/code&gt;: Restricts &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_so.html#loadmodule&quot;&gt;Apache loadable modules&lt;/a&gt; to just the few needed to server static content; in this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;mod_alias&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mod_cgi&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mod_deflate&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mod_dir&lt;/code&gt;, two logging modules, &lt;code class=&quot;highlighter-rouge&quot;&gt;mod_mime&lt;/code&gt; (MIME support), &lt;code class=&quot;highlighter-rouge&quot;&gt;mod_rewrite&lt;/code&gt; (for URL re-writing) and &lt;code class=&quot;highlighter-rouge&quot;&gt;mod_setenvif&lt;/code&gt; (useful for sending different responses based on browser types)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;default_site_enabled&lt;/code&gt;: Disables the default website&lt;/li&gt;
  &lt;li&gt;directory_index: Disables &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_dir.html#directoryindex&quot;&gt;directory indexing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;directory_options: Disable all “&lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#options&quot;&gt;extra features&lt;/a&gt;” in directories, such as fancy indexing, symlink-following, multi-views, server-side includes and so forth&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ext_status&lt;/code&gt;: Disables &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#extendedstatus&quot;&gt;extended status&lt;/a&gt; messages&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;keepaliverequests&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalivetimeout&lt;/code&gt;: Disables HTTP &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#keepalive&quot;&gt;Keep-Alive&lt;/a&gt; messages, which can cause performance to suffer in many cases&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;serversignature&lt;/code&gt;: Removes &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#serversignature&quot;&gt;server signatures&lt;/a&gt; from error messages&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;servertokens&lt;/code&gt;: Minimizes the &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#servertokens&quot;&gt;response header field&lt;/a&gt; to include just the webserver software (“Apache”) but not the version, OS or compiled-in options&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timeout&lt;/code&gt;: Increases the time the server &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#timeout&quot;&gt;is allowed to respond to a request&lt;/a&gt; to 120 seconds&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;traceenable&lt;/code&gt;: Removes support for the &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#traceenable&quot;&gt;HTTP TRACE&lt;/a&gt; method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of these attributes, the &lt;code class=&quot;highlighter-rouge&quot;&gt;default_modules&lt;/code&gt; attribute is the most interesting because its value causes various Apache modules to be enabled or disabled. By default, the &lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt; recipe loads a huge number of modules. By overriding the defaults you can restrict what is loaded to a small subset.&lt;/p&gt;

&lt;p&gt;Note that Apache always loads a few other modules regardless of the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;default_modules&lt;/code&gt; attribute. These include authorization, content negotiation, timeout and status modules. But by keeping the list of modules small, you keep the server’s memory footprint smaller. You also get rid of features that aren’t needed in most websites and can be sources of risk, such as WebDAV support, LDAP authentication, proxying and so forth.&lt;/p&gt;

&lt;p&gt;I do not claim to be an Apache expert by any means, but default settings in the list above are reasonably tight. Certainly, they are good enough to demonstrate how you can use attributes to customize how the Apache cookbook runs.&lt;/p&gt;

&lt;p&gt;Now that you have created override attributes for the &lt;code class=&quot;highlighter-rouge&quot;&gt;web server&lt;/code&gt; role, it is time to put them to use. Save and close the role editor; the contents will be saved to the Chef server.&lt;/p&gt;

&lt;p&gt;SSH into the test VM and execute the node’s run-list again so that the new attribute values are applied. From the post from last time, recall that the Chef role &lt;code class=&quot;highlighter-rouge&quot;&gt;webserver&lt;/code&gt; had been assigned to &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;. All that you need to do, therefore, is run the client again. SSH into the box and elevate to &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh
sudo su
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chef-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see a dizzying rush of console messages, including many indicating that various Apache-related files are being modified. The run process should only take a few seconds. Assuming all recipes succeed, you will see a message at the bottom similar to the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Recipe: apache2::default
  * service[apache2] action restart
    - restart service service[apache2]

Chef Client finished, 31 resources updated
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Congratulations; your Apache server is now just a little bit faster, and a little bit tighter. You did it solely by twiddling a few attributes, without having to write any code. Nice, huh?&lt;/p&gt;

&lt;h1 id=&quot;creating-a-new-role-for-server-hardening&quot;&gt;Creating a new role for server hardening&lt;/h1&gt;
&lt;p&gt;Let’s do some more attribute-twiddling. This time, your objective is to tighten the configuration of several common server components that reside on most servers: the SSH configuration, and the Chef client itself.&lt;/p&gt;

&lt;p&gt;Download the cookbooks for SSH and the Chef client:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife cookbook site install openssh
knife cookbook site install chef-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Upload the cookbooks to the Chef server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife cookbook upload --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a second role. This role, called &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt;, will be used by all servers and will include recipes that every server should use. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife role create base
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…and supply the following contents into the editor:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;base&quot;,
  &quot;description&quot;: &quot;Essential recipes for securing every server&quot;,
  &quot;json_class&quot;: &quot;Chef::Role&quot;,
  &quot;default_attributes&quot;: {
  },
  &quot;override_attributes&quot;: {
    &quot;openssh&quot;: {
      &quot;server&quot;: {
        &quot;allow_agent_forwarding&quot;: &quot;no&quot;,
        &quot;allow_tcp_forwarding&quot;: &quot;no&quot;,
        &quot;client_alive_count_max&quot;: &quot;0&quot;,
        &quot;client_alive_interval&quot;: &quot;600&quot;,
        &quot;ignore_user_known_hosts&quot;: &quot;yes&quot;,
        &quot;login_grace_time&quot;: &quot;30s&quot;,
        &quot;password_authentication&quot;: &quot;no&quot;,
        &quot;permit_root_login&quot;: &quot;no&quot;,
        &quot;rsa_authentication&quot;: &quot;no&quot;
      }
    }
  },
  &quot;chef_type&quot;: &quot;role&quot;,
  &quot;run_list&quot;: [
    &quot;recipe[openssh]&quot;,
    &quot;recipe[chef-client::delete_validation]&quot;
  ],
  &quot;env_run_lists&quot;: {
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;openssh&lt;/code&gt; recipe configures SSH on the machine. The override attributes above it configure the OpenSSH server daemon so that it uses sensible settings. Root logins are disabled, password authentication is disallowed; only public-key authentication is allowed. Session-forwarding is disabled, making the server unsuitable for use a “jump box.” (For more information on hardening SSHD, see the many &lt;a href=&quot;http://www.faqs.org/docs/securing/chap15sec122.html&quot;&gt;fine&lt;/a&gt; &lt;a href=&quot;http://www.thegeekstuff.com/2011/05/openssh-options/&quot;&gt;articles&lt;/a&gt; on the subject.)&lt;/p&gt;

&lt;p&gt;In addition to the SSH settings, notice the addition of the &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client::delete_validation&lt;/code&gt; recipe. This recipe does something rather important from a security prospective. As discussed previously, Chef server communicates with its nodes and clients using public/private key pairs. When a new node is added, a shared “validation key” is copied to the new node. This is a standard 2048-bit RSA private key with a name similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;organization-validator.pem&lt;/code&gt;; it is stored in your Chef repository’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.chef&lt;/code&gt; directory. It is &lt;em&gt;not&lt;/em&gt; versioned by Git because &lt;code class=&quot;highlighter-rouge&quot;&gt;.chef/*.pem&lt;/code&gt; is added to &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;, and it is obviously very sensitive. Anyone who obtained the validation key could conceivably join your Chef node set and gain access to the configuration data, recipes and more. Despite the sensitivity of this key, however, after the bootstrap operation completes, Chef inexplicably leaves it on the new node! It would be much nicer to remove it after the bootstrap.&lt;/p&gt;

&lt;p&gt;For security reasons, you should remove the validation key after the initial bootstrap because it is not needed any more. The &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client::delete_validation&lt;/code&gt; recipe does that. That is why it is in the run-list for the &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; role.&lt;/p&gt;

&lt;h1 id=&quot;adding-the-base-role-to-the-server&quot;&gt;Adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; role to the server&lt;/h1&gt;
&lt;p&gt;After you define the &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; role, you need to apply it to the test VM &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt; by adding it to the node’s run list. At present, &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt; is only running recipes that are part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;webserver&lt;/code&gt; role. As you might expect, you can add to a node’s run-list by using &lt;code class=&quot;highlighter-rouge&quot;&gt;knife&lt;/code&gt;. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife node run_list add tester.local &quot;role[base]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see output similar to the following that confirms that the &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; role has been added to &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;’s run list.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tester.local:
  run_list:
    role[webserver]
    role[base]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SSH back into the test box (type &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant ssh&lt;/code&gt; followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo su&lt;/code&gt;). Run &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;You will see many messages scroll by indicating that the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/ssh_config&lt;/code&gt; files have been updated. By default, the Chef &lt;code class=&quot;highlighter-rouge&quot;&gt;openssh&lt;/code&gt; cookbook configures these files with the default settings that ship with OpenSSH. Console output should look similar to the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Recipe: openssh::default
  * package[openssh-client] action install (up to date)
  * package[openssh-server] action install (up to date)
  * service[ssh] action enable
    - enable service service[ssh]

  * service[ssh] action start (up to date)
  * template[/etc/ssh/ssh_config] action create
    - update content in file /etc/ssh/ssh_config from 265a26 to 74365c
        --- /etc/ssh/ssh_config	2012-04-02 11:49:30.000000000 +0000
        +++ /tmp/chef-rendered-template20131003-3037-n6ytk	2013-10-03 02:14:48.674543237 +0000
        @@ -1,53 +1,3 @@
...
  * template[/etc/ssh/sshd_config] action create
    - update content in file /etc/ssh/sshd_config from 33469d to 1ba1c4
        --- /etc/ssh/sshd_config	2013-05-11 06:10:17.805866080 +0000
        +++ /tmp/chef-rendered-template20131003-3037-6xl885	2013-10-03 02:14:49.114323240 +0000
        @@ -1,88 +1,14 @@
        -# Package generated configuration file
        -# See the sshd_config(5) manpage for details
        +# Generated by Chef for tester.local

Recipe: openssh::default
  * service[ssh] action restart
    - restart service service[ssh]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can verify that SSH has been reconfigured correctly by trying to SSH into &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt; using the default Vagrant account credentials (&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant&lt;/code&gt;). They should no longer work. However, typing the &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant ssh&lt;/code&gt; command should still get you in. That is because the &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant ssh&lt;/code&gt; authenticates using an embedded private key that is hardcoded into Vagrant. The public half of this key is an authorized key in the &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant&lt;/code&gt; account’s list of public keys. (You can verify this yourself by examining the file &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/vagrant/.ssh/authorized_keys&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;. It shows one entry whose description reads “vagrant insecure public key.” How did it get there? Well, that is part of the ”contract” of building a &lt;a href=&quot;http://docs-v1.vagrantup.com/v1/docs/base_boxes.html&quot;&gt;Vagrant-compatible base box&lt;/a&gt;.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: running the &lt;code class=&quot;highlighter-rouge&quot;&gt;openssh&lt;/code&gt; recipe with the attributes as shown above can have adverse consequences on production nodes if you aren’t prepared. The recipe with the attributes as shown removes SSH &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; access. Unless you have another way of becoming &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; on the box, you might find yourself locked out! If your machine is a Vagrant machine, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant ssh&lt;/code&gt; command to become root. For non-Vagrant machines, you will need a non-root account that allows public-key logins and can &lt;code class=&quot;highlighter-rouge&quot;&gt;su&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;. You have been warned.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;next-managing-ssl-certificates-and-keys&quot;&gt;Next: Managing SSL certificates and keys&lt;/h1&gt;
&lt;p&gt;This post introduced the concept of using Chef to partially harden a web server. You reduced the number of loadable Apache modules to a minimum set, disabled unnecessary services and reduced the amount of useful information an attacker could obtain. You created a second role called &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; and assigned two recipes, &lt;code class=&quot;highlighter-rouge&quot;&gt;openssh&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client::delete_validation&lt;/code&gt;. These recipes configure OpenSSH in a more restrictive manner by disabling password authentication, disabling root logins and preventing session forwarding. The &lt;code class=&quot;highlighter-rouge&quot;&gt;delete_validation&lt;/code&gt; recipe removes the Chef validation key from the node after it is created, which removes a potential security risk.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;/blog/2013/10/06/chef-3rd-course/&quot;&gt;next post&lt;/a&gt;, you will switch back to Apache. You will use Chef to perform one of the most challenging aspects of any server configuration: copying SSL keying materials to server nodes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image copyright 2016 by Kharnagy, licensed under the Creative Commons Attribution-Share Alike 4.0 International license.&lt;/em&gt;&lt;/p&gt;</content><author><name>arj</name></author><summary type="html">Introduction This is the second in a series of occasional posts about security and DevOps. The ultimate goal of this series is to show how to build a reasonably secure Apache web server using the popular DevOps automation tool Chef. The server I am describing how to build will be suitable for serving static content. Readers of this blog know that I am a fan of static blogging tools like Octopress, which I use to generate this website.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/512px-Devops-toolchain.png" /></entry><entry><title type="html">The DevOps Security Handbook: Building Security In With Chef, Part I</title><link href="/blog/2013/10/01/chef-starter/" rel="alternate" type="text/html" title="The DevOps Security Handbook&amp;#58; Building Security In With Chef, Part I" /><published>2013-10-01T16:18:00-04:00</published><updated>2013-10-01T16:18:00-04:00</updated><id>/blog/2013/10/01/chef-starter</id><content type="html" xml:base="/blog/2013/10/01/chef-starter/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is the first in a series of posts about &lt;a href=&quot;http://www.opscode.com/chef/&quot;&gt;Chef&lt;/a&gt;, an infrastructure automation platform. The goal of this series is to describe how to build a reasonably secure Apache web server. By using Chef, we can quickly and efficiently build identical web servers with assurance that they will work the same way, every time, and have the security properties we want.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;You will build this server in stages. The server will ultimately contain the following elements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apache 2 HTTP web server, with minimal modules and a virtual host defined for serving website content&lt;/li&gt;
  &lt;li&gt;A limited user account whose home directory contains the website content. The account only accepts SSH remote logins that use public-key authentication. The Apache virtual host’s document root will point to a subdirectory of the account’s home&lt;/li&gt;
  &lt;li&gt;A user group whose name matches the user account name, and which contains the user as its only member&lt;/li&gt;
  &lt;li&gt;Hardened configuration with minimized services, synchronized time, intrusion prevention, and other security characteristics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For purposes of testing, the server will be spun up as a virtual machine on your local workstation. You will use VirtualBox VMs for this purpose.&lt;/p&gt;

&lt;p&gt;This first post will describe how to set up a basic test infrastructure that uses Chef. You will set up the Chef workstation and server account, create an Apache server role and a test environment, set up a virtual machine, and build your first node. The web server will not do much, and it will not be especially secure — at least not initially. Subsequent posts will gradually add more security components. By adding security features gradually, you will learn how to use Chef. As a side effect, you will learn how Chef’s philosophy of “convergence” makes it easy to gradually massage your nodes into the states you want. This is important when adding Chef to servers that already exist.&lt;/p&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting started&lt;/h1&gt;
&lt;p&gt;In order to demonstrate how Chef works, you will need a virtual machine to play with. To create one, you will use Vagrant to instantiate a new VirtualBox VM. Our goal is to create a VM that you can boot and access on your laptop for testing purposes. After you do that, you will bootstrap it with Chef so that you can configure and manage it.&lt;/p&gt;

&lt;p&gt;Some prerequisites. You will need to download and install:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org&quot;&gt;VirtualBox&lt;/a&gt; from Oracle, which creates and manages guest virtual machines.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vagrantup.com&quot;&gt;Vagrant&lt;/a&gt;, which creates, manages, and destroys VirtualBox VM images from the command line.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://git-scm.com&quot;&gt;Git&lt;/a&gt;, the ubiquitous version-control system that will allow you to “check in” your Chef repository and manage its versions as you create the server.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.opscode.com/chef/&quot;&gt;Chef 11.x&lt;/a&gt; workstation software, which is where all of the magic happens.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; 1.9.3 or higher&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chef works best on Unix- and Linux-based systems. I used a Mac to prepare this guide. But my instructions are largely platform independent; as long as you have a Linux- or BSD-based workstation, or a Mac, you should be in good shape.&lt;/p&gt;

&lt;p&gt;OpsCode’s QuickStart guide does a fine job explaining how to do the initial preparatory steps in their &lt;a href=&quot;https://learnchef.opscode.com/quickstart/workstation-setup/&quot;&gt;Workstation setup page&lt;/a&gt;. OpsCode recommends that you install a Ruby version manager. I use RVM myself, although the documentation (in the Advanced tab) recommends RBENV. Open up OpsCode’s QuickStart guide and do everything on Page 1. It should take you about 5 minutes.&lt;/p&gt;

&lt;p&gt;Next, you need to create an &lt;a href=&quot;http://www.opscode.com/enterprise-chef/&quot;&gt;Enterprise Chef&lt;/a&gt; account, and download the starter package using the Enterprise Chef web interface.  &lt;a href=&quot;https://learnchef.opscode.com/quickstart/chef-repo/&quot;&gt;Page 2 of the  documentation page&lt;/a&gt; explains how to do this. The free version of Enterprise Chef supports up to five nodes, which is perfect for our purposes. After you sign up and create an account, create a new Organization and download the “Starter Kit” as described on QuickStart Page 2. Follow the instructions on this page all the way up to the “Create a Simple Cookbook” section. Once you have done that, you have configured your Chef workstation properly.&lt;/p&gt;

&lt;p&gt;A word about the “Starter Kit.” The Starter Kit is a zipped bundle that contains a sample Chef repository directory structure, and crucially, a private key for the your workstation, which Chef calls a “client.” When you expand the Starter Kit,  it will unpack into a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-repo&lt;/code&gt;. This is your Chef repository, and you should move it somewhere useful. I put mine in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/workspace&lt;/code&gt;, which is where I keep all of my dev stuff, but you can put it anywhere you like.&lt;/p&gt;

&lt;p&gt;Using the Chef workstation tools, you create and edit Chef roles, environments, cookbooks and other locally on your workstation. When you want to push new versions out to your nodes, you use Knife to upload them to the Enterprise Chef server. When you upload, Knife uses the client’s private key to authenticate with the Enterprise Chef server.&lt;/p&gt;

&lt;p&gt;With the initial setup stuff out of the way, let’s start getting into the fun stuff.&lt;/p&gt;

&lt;h1 id=&quot;creating-sample-server-run-lists-roles-and-environments&quot;&gt;Creating sample server run-lists, roles and environments&lt;/h1&gt;
&lt;p&gt;I have found the OpsCode QuickStart documentation to be quite well-written. But it only gets you so far, and it leaves out some important steps for using Chef in a more serious way. Let’s take this opportunity to stray from the OpsCode documentation a bit and lay down some additional foundation-work for building the web server. In particular, let’s set up some initial run-lists, roles and environments for your test VM.&lt;/p&gt;

&lt;p&gt;Some background. Chef “converges” nodes into their desired states by applying a ”run-list” of &lt;a href=&quot;http://docs.opscode.com/essentials_cookbook_recipes.html&quot;&gt;recipes&lt;/a&gt; to each node. The run-list of recipes (Apache2, NTPD, user creation, etc) that apply can be specified in several ways. The quickest and most direct way is to specify the node’s run-list of recipes when the node is initially bootstrapped with Chef; that is, when the Chef agent (&lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client&lt;/code&gt;) is initially installed on the node. Bootstrapping the node configuration is done using Knife, and the syntax looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife bootstrap tester.local --run-list &quot;recipe[apt],recipe[apache2]&quot; -E testing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have omitted some of the syntax the sake of simplicity; don’t try running this. There are important concepts to understand here. The &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap&lt;/code&gt; command causes the &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client&lt;/code&gt; application to be installed on the node. The &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client&lt;/code&gt; is essentially an &lt;em&gt;agent&lt;/em&gt;. It configures and installs software based on instructions (”recipes”) it receives from the Chef server. Notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;run-list&lt;/code&gt; parameter: it indicates that the APT and Apache2 recipes will be applied to node &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;. What this means is that when &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client&lt;/code&gt; is bootstrapped onto the node, the APT and Apache packages will be downloaded, installed and configured as well.&lt;/p&gt;

&lt;p&gt;Notice also the &lt;code class=&quot;highlighter-rouge&quot;&gt;-E&lt;/code&gt; parameter. This means that &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt; should be assigned to an environment called &lt;code class=&quot;highlighter-rouge&quot;&gt;testing&lt;/code&gt;, which you will define in a minute. By ”environment,” Chef means a group of nodes that typically correspond to a stage of development, for example “testing,” “staging,” or “production.” Let’s create the &lt;code class=&quot;highlighter-rouge&quot;&gt;testing&lt;/code&gt; environment now. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife environment create testing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…and type or paste the following JSON contents into the file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;testing&quot;,
  &quot;description&quot;: &quot;Test environment&quot;,
  &quot;cookbook_versions&quot;: {
  },
  &quot;json_class&quot;: &quot;Chef::Environment&quot;,
  &quot;chef_type&quot;: &quot;environment&quot;,
  &quot;default_attributes&quot;: {
  },
  &quot;override_attributes&quot;: {
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nothing tricky here — just a simple JSON file with a few attributes in it. The &lt;code class=&quot;highlighter-rouge&quot;&gt;default_attributes&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;override_attributes&lt;/code&gt; items can be used to supply variables to the recipes that are unique to the testing environment, for example, debug settings or dummy passwords. You will leave these blank for now because they don’t apply in this case.&lt;/p&gt;

&lt;p&gt;As I mentioned, there are several ways to assign run-list items to nodes. Direct assignment of recipes during bootstrapping, shown in the edited &lt;code class=&quot;highlighter-rouge&quot;&gt;knife bootstrap&lt;/code&gt; command above, is the easiest way. But that won’t scale if you have multiple nodes that must be configured identically. It makes more sense, instead, to create a &lt;em&gt;role&lt;/em&gt;, which allows common run-lists to be defined for groups of machines that do the same thing. Instead of bootstrapping with a specific run-list of recipes, you can bootstrap with roles. When you use a role, Chef looks up (dereferences, if you will) the run-list for the role and applies all of the recipes it contains, along with any custom attributes. You can think of roles as a type of pointer.&lt;/p&gt;

&lt;p&gt;Let’s create a new role called &lt;code class=&quot;highlighter-rouge&quot;&gt;webserver&lt;/code&gt;. In it you will add the components needed to run your website. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife role create webserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…and supply these contents:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;webserver&quot;,
  &quot;description&quot;: &quot;Web server for my.org&quot;,
  &quot;json_class&quot;: &quot;Chef::Role&quot;,
  &quot;default_attributes&quot;: {
  },
  &quot;override_attributes&quot;: {
    &quot;apache&quot;: {
      &quot;listen_ports&quot;: [ &quot;80&quot; ]
    }
  },
  &quot;chef_type&quot;: &quot;role&quot;,
  &quot;run_list&quot;: [
    &quot;recipe[apt]&quot;,
    &quot;recipe[apache2]&quot;,
  ],
  &quot;env_run_lists&quot;: {
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;run-list&lt;/code&gt; attribute contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt; cookbook, similar to what you used in the initial bootstrap command. The  &lt;code class=&quot;highlighter-rouge&quot;&gt;listen-ports&lt;/code&gt; override attribute tells the &lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt; cookbook to configure Apache to listen just on port 80. You will learn more about override attributes in a future post. But if you are curious about how the cookbook works, and about the various attributes you can use to customize Apache’s configuration, see OpsCode’s &lt;a href=&quot;http://community.opscode.com/cookbooks/apache2&quot;&gt;online decimation&lt;/a&gt;. Notice also the &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; recipe; this is required because Debian’s APT package updater is how Apache is actually installed onto the node.&lt;/p&gt;

&lt;p&gt;To bootstrap using roles instead of directly specifying recipes, you would use the following syntax (some details omitted):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife bootstrap tester.local --run-list &quot;role[webserver]&quot; -E testing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, don’t type this in, because it won’t work without some additional syntax; you will get to it soon enough.&lt;/p&gt;

&lt;p&gt;Let’s complete the initial Chef setup. So far, you have created a sample test environment called &lt;code class=&quot;highlighter-rouge&quot;&gt;testing&lt;/code&gt;, and a sample server role called &lt;code class=&quot;highlighter-rouge&quot;&gt;webserver&lt;/code&gt;. To complete the initial setup, you need to do two more things: download the actual cookbooks that Chef will apply to the node; and upload the cookbooks to the Chef server so that any nodes that are assigned it can get it. The cookbooks we need are &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; (required to install Apache), and &lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt; (Apache itself).&lt;/p&gt;

&lt;p&gt;To install the apache2 cookbook, type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife cookbook site install apache2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command looks up the &lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt; cookbook on the Opscode &lt;a href=&quot;http://community.opscode.com&quot;&gt;community cookbook site&lt;/a&gt; and causes it to be downloaded to your workstation. You will see a series of output messages showing the progress of the download, followed by a completion message when it succeeds. While you are at it, go ahead and install the &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; cookbook too.&lt;/p&gt;

&lt;p&gt;After downloading both, commit your current Chef repo to Git:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
git commit -m &quot;Added Apache and APT cookbooks.&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then upload your cookbooks to the Chef server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife cookbook upload --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It might seem a little strange to have to upload the cookbooks to the Chef server. After all, they are managed centrally from the community cookbook site. Why can’t roles simply reference the cookbooks stored there, instead of needing to make copies? Frankly, I am not too sure why this is the case. I suspect Chef works this way so that cookbooks and recipes can be hacked up when needed. Regardless, you must upload cookbooks to Chef server after you update them. If you don’t, the Chef client on any nodes you create will continue to use outdated recipes.&lt;/p&gt;

&lt;h1 id=&quot;backing-up-chef-server-data&quot;&gt;Backing up Chef server data&lt;/h1&gt;
&lt;p&gt;Because you are using Enterprise Chef, your nodes, roles, environments and data bags are stored on the server — not locally. While I trust OpsCode to keep their servers up and available, I like to keep copies of important data on my client so that I have a record of them, and can version them with Git. You should, too.&lt;/p&gt;

&lt;p&gt;To do that, you will need to install the &lt;code class=&quot;highlighter-rouge&quot;&gt;backup-export&lt;/code&gt; Knife plugin, part of the &lt;a href=&quot;https://github.com/stevendanna/knife-hacks&quot;&gt;Knife Hacks&lt;/a&gt; package. Then, you should copy a specific plugin file from GitHub into our local Chef knife plugin cache in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.chef/plugins/knife&lt;/code&gt;, creating the directory if necessary. A few quick commands should do the trick:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p ~/.chef/plugins/knife
curl https://raw.github.com/stevendanna/knife-hacks/master/plugins/backup_export.rb &amp;gt; ~/.chef/plugins/knife/backup_export.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change back to your &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-repo&lt;/code&gt; directory and issue the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife backup export
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll see output similar to this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Backing up nodes
Backing up nodes tester.local
Backing up roles
Backing up roles webserver
Backing up data bags
Backing up environments
Backing up environments testing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default, backups are stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;.chef/chef_server_backup&lt;/code&gt;. You can change this by modifying the &lt;code class=&quot;highlighter-rouge&quot;&gt;chef_server_backup_dir&lt;/code&gt; entry in &lt;code class=&quot;highlighter-rouge&quot;&gt;.chef/knife.rb&lt;/code&gt;, but there’s no obvious benefit to doing that here. It is sufficient simply to have them present in the Chef repo directory, because they can be checked into Git using the usual familiar &lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt; steps. Go ahead and do that now.&lt;/p&gt;

&lt;p&gt;If you have gotten this far, your initial Chef setup is complete. Now, let’s create a test machine.&lt;/p&gt;

&lt;h1 id=&quot;creating-a-virtual-machine-for-testing&quot;&gt;Creating a virtual machine for testing&lt;/h1&gt;
&lt;p&gt;Change to your Chef repo directory. Create a new file &lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt; with these contents, or edit the existing one so that it matches this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# vi: set ft=ruby :&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;opscode-ubuntu-12.04-i386&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;box_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://opscode-vm.s3.amazonaws.com/vagrant/opscode_ubuntu-12.04-i386_provisionerless.box&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tester.local&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tester&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;network&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;private_network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;ip: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.56.2&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:virtualbox&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gui&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tester.local&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;’s job is to tell Vagrant how to set up the test VM. If you have used Vagrant before, you will notice that this &lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt; is shorter than the default file Vagrant supplies. Here’s what it does:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Downloads an Ubuntu 12.04 base box (essentially, a virtual machine image) from OpsCode’s repository on Amazon&lt;/li&gt;
  &lt;li&gt;Creates a VirtualBox VM based on the machine image&lt;/li&gt;
  &lt;li&gt;Gives the VM the network name &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;. This is the name that the Unix command &lt;code class=&quot;highlighter-rouge&quot;&gt;hostname&lt;/code&gt; will return when you log into it&lt;/li&gt;
  &lt;li&gt;Names the VirtualBox machine &lt;code class=&quot;highlighter-rouge&quot;&gt;tester&lt;/code&gt;. This is the name used to start, stop and delete the VM when using the VirtualBox command-line tools or the VirtualBox GUI.
Names the VirtualBox image directory &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;. By default, VirtualBox names the image based on the directory that contains &lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;, plus a timestamp suffix. The &lt;code class=&quot;highlighter-rouge&quot;&gt;vb.name&lt;/code&gt; property inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.vm.provider&lt;/code&gt; block overrides the default so that it matches the host name.&lt;/li&gt;
  &lt;li&gt;Configures the VM’s networking interface to use a private network address 192.168.56.2. This will allow us to start the VM and see it on our workstation, but the VM won’t be accessible from the outside.&lt;/li&gt;
  &lt;li&gt;Specifies that when you boot the VM, it will be booted in headless mode; the VirtualBox GUI won’t be displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is all you need to instantiate a new VM on our workstation. Next, edit your workstation’s &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; file and add a line that points to the VM using the private IP address and name &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;192.168.56.2    tester.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great. Now, let’s go ahead and actually create the VM. From the command line in the same directory as &lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;, type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vagrant will look by default in the same directory for &lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;, and having found it, will create the VM according to the contents of the file. You will see output similar to the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bringing machine 'tester' up with 'virtualbox' provider...
[tester] Importing base box 'opscode-ubuntu-12.04-i386'...
[tester] Matching MAC address for NAT networking...
[tester] Setting the name of the VM...
[tester] Clearing any previously set forwarded ports...
[tester] Creating shared folders metadata...
[tester] Clearing any previously set network interfaces...
[tester] Preparing network interfaces based on configuration...
[tester] Forwarding ports...
[tester] -- 22 =&amp;gt; 2222 (adapter 1)
[tester] Booting VM...
[tester] Waiting for VM to boot. This can take a few minutes.
[tester] VM booted and ready for use!
[tester] Setting hostname...
[tester] Configuring and enabling network interfaces...
[tester] Mounting shared folders...
[tester] -- /vagrant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The entire process should take between 30 seconds to a minute if the base box is already cached on your workstation. If not, the first time you do &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt; Vagrant will need to download the machine image from Amazon.&lt;/p&gt;

&lt;p&gt;You can verify that the new test VM is up by pinging tester and verifying that it responds:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Tweety:chef-repo arj$ ping tester.local
PING tester (192.168.56.2): 56 data bytes
64 bytes from 192.168.56.2: icmp_seq=0 ttl=64 time=0.582 ms
64 bytes from 192.168.56.2: icmp_seq=1 ttl=64 time=0.638 ms
…
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Typing &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant status&lt;/code&gt; will also indicate that the VM is up and running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Tweety:chef-repo arj$ vagrant status
Current machine states:

tester                    running (virtualbox)

The VM is running. To stop this VM, you can run `vagrant halt` to
shut it down forcefully, or you can run `vagrant suspend` to simply
suspend the virtual machine. In either case, to restart it again,
simply run `vagrant up`.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can repeat this process as often as you like by destroying and recreating the VM:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant halt tester
vagrant destroy tester
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you would like to verify that the VM is really up, you can SSH into the box using the username &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant&lt;/code&gt; and password &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant&lt;/code&gt;. You can also use the command &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant ssh&lt;/code&gt; which does the same thing.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: by default, base boxes used with Vagrant ship with a pre-installed SSH public/private key pair that is used for SSHing into VMs it creates. These base boxes also ship with default &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant/vagrant&lt;/code&gt; credentials. This configuration is &lt;a href=&quot;http://stackoverflow.com/questions/14715678/vagrant-insecure-by-default&quot;&gt;not secure&lt;/a&gt;. For testing purposes on your local workstation this should not be a problem, because we have configured the VM to use host-based networking. It cannot be accessed outside of the workstation. But production servers should not use Vagrant with its default configuration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;bootstrapping-the-virtual-machine-with-chef&quot;&gt;Bootstrapping the virtual machine with Chef&lt;/h1&gt;
&lt;p&gt;So far, so good. You have successfully created a test virtual machine, but it isn’t much good to us yet because it doesn’t have Chef on it. Until it does, you cannot manage it.&lt;/p&gt;

&lt;p&gt;It is (finally!) time to “bootstrap” the VM using Knife. This installs the &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client&lt;/code&gt; agent on the node, and registers the new node with the Chef server. Type in the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;knife bootstrap tester.local --ssh-user vagrant  --ssh-password vagrant --run-list &quot;role[webserver]&quot; -E testing --sudo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Viola! Assuming you did everything as described, Chef will SSH into the box, download and install Chef client onto it, and begin converging the node into its desired state; in this case, installing and configuring Apache.&lt;/p&gt;

&lt;p&gt;Immediately after hitting Enter, a long list of output lines should appear. These should resemble the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bootstrapping Chef on tester.local
tester.local --2013-09-29 03:20:41--  https://www.opscode.com/chef/install.sh
tester.local 
tester.local Resolving www.opscode.com (www.opscode.com)... 
tester.local 184.106.28.82
tester.local 
tester.local Connecting to www.opscode.com (www.opscode.com)|184.106.28.82|:443... 
tester.local connected.
tester.local 
tester.local HTTP request sent, awaiting response... 
tester.local 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;followed by&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tester.local Starting Chef Client, version 11.6.0
tester.local 
tester.local resolving cookbooks for run list: [&quot;apt&quot;, &quot;apache2&quot;]
tester.local 
tester.local Synchronizing Cookbooks:
tester.local 
tester.local   - apt
tester.local 
tester.local   - apache2
tester.local 
tester.local Compiling Cookbooks...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then a series of lines that indicate that APT and Apache have been installed. The last lines indicate that Apache has been installed and restarted, and that the resources on the box have been updated:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tester.local Recipe: apache2::default
tester.local 
tester.local   * service[apache2] action restart
tester.local 
tester.local 
tester.local     - restart service service[apache2]
tester.local 
tester.local 
tester.local 
tester.local Chef Client finished, 28 resources updated
tester.local 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you see output similar to this, and no errors, it means that you have successfully converged your first node. Congratulations! Excellent work.&lt;/p&gt;

&lt;p&gt;You verify that the web server is up by firing up your browser to the address &lt;code class=&quot;highlighter-rouge&quot;&gt;http://tester.local&lt;/code&gt;. It should return a “Forbidden” message because we have not actually provided any HTML pages for Apache to serve up. But that is evidence enough that Apache is actually working.&lt;/p&gt;

&lt;h1 id=&quot;next-adding-security-to-the-box&quot;&gt;Next: Adding security to the box&lt;/h1&gt;
&lt;p&gt;This post covered the basics of how to get going with Chef. You have installed the Chef workstation software and supporting components Git, Ruby and VirtualBox and Vagrant. You have created a sample role called &lt;code class=&quot;highlighter-rouge&quot;&gt;webserver&lt;/code&gt; and assigned two sample recipes, &lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt;, to it. You created a virtual machine called &lt;code class=&quot;highlighter-rouge&quot;&gt;tester&lt;/code&gt; with the domain name &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt; and bootstrapped Chef onto it, placing it under Chef control.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;/blog/2013/10/03/chef-2nd-course/&quot;&gt;next post&lt;/a&gt;, you will begin doing more useful work. I’ll describe how to fine-tune the Apache installation. We will also begin increasing the security of the machine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was updated October 1, 2013 to change the hostname used in the examples from &lt;code class=&quot;highlighter-rouge&quot;&gt;tester&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;tester.local&lt;/code&gt;. It was updated on October 2, 2013 to remove references to the half-configured SSL support for Apache; I’ll cover this more fully in a future post.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image copyright 2016 by Kharnagy, licensed under the Creative Commons Attribution-Share Alike 4.0 International license.&lt;/em&gt;&lt;/p&gt;</content><author><name>arj</name></author><summary type="html">Introduction This is the first in a series of posts about Chef, an infrastructure automation platform. The goal of this series is to describe how to build a reasonably secure Apache web server. By using Chef, we can quickly and efficiently build identical web servers with assurance that they will work the same way, every time, and have the security properties we want.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/512px-Devops-toolchain.png" /></entry><entry><title type="html">Building Security In Using Chef</title><link href="/blog/2013/09/23/Building-Security-in-Using-Chef/" rel="alternate" type="text/html" title="Building Security In Using Chef" /><published>2013-09-23T00:02:00-04:00</published><updated>2013-09-23T00:02:00-04:00</updated><id>/blog/2013/09/23/Building-Security-in-Using-Chef</id><content type="html" xml:base="/blog/2013/09/23/Building-Security-in-Using-Chef/">&lt;p&gt;Lately I have been spending a lot of time with a new best friend. This new friend is reliable; he does everything according to plan and always exactly the same way. The results are exactly the same every time, too. And he speaks to me in a language that I understand — the language of food.&lt;/p&gt;

&lt;p&gt;I am not talking about a new buddy gourmand, about a pal I go out to restaurants with, or about a super-reliable project manager. My new best friend is a technology called Chef, made by &lt;a href=&quot;http://www.opscode.com/&quot;&gt;OpsCode&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;a href=&quot;http://www.opscode.com/chef/&quot;&gt;Chef&lt;/a&gt;, along with &lt;a href=&quot;http://puppetlabs.com/puppet/what-is-puppet&quot;&gt;Puppet&lt;/a&gt; and &lt;a href=&quot;http://cfengine.com/&quot;&gt;CFEngine&lt;/a&gt;, is a flexible toolset for building infrastructure. The Chef mantra is “infrastructure as code,” which means simply that you can build infrastructure — servers and workstations the same way every time. Chef has important implications for security because, by using it, you can ensure that your nodes have exactly the security properties you want by “baking it in” to what Chef calls “cookbooks,” the core component. I’ll come back to the security implications in a few minutes, but in the meantime I should explain what a cookbook is.&lt;/p&gt;

&lt;p&gt;Cookbooks are packages that define how packages, applications or system functions should be built and configured. Cookbooks exist for Apache, NTP, user and group account creation, and just about every common application you can imagine. At a file level, cookbooks are basically composed of property files, templates and clever glue-code. The cookbook’s job is to declare required packages and dependencies; provide templates for configuration files that need to be modified, and provide Ruby code that sets up the packages, configures things or does whatever is needed to achieve the desired result. The process for building nodes is similar to how developers build code.&lt;/p&gt;

&lt;h1 id=&quot;typical-chef-workflow&quot;&gt;Typical Chef workflow&lt;/h1&gt;
&lt;p&gt;Here’s what a typical project workflow looks like. With Chef, you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new developer project using Git&lt;/li&gt;
  &lt;li&gt;Download one or more cookbooks for the applications or services you want to manage; or, you create new ones from scratch&lt;/li&gt;
  &lt;li&gt;Modify the properties associated with each cookbook as needed&lt;/li&gt;
  &lt;li&gt;Upload the modified cookbooks and/or properties to the master Chef server&lt;/li&gt;
  &lt;li&gt;“Bootstrap” new nodes from standard machine images, for example a generic CentOS VM. The bootstrap process injects Chef agents onto the new nodes and then…&lt;/li&gt;
  &lt;li&gt;“Converge” each new nodes into the desired state by downloading the required cookbooks and properties (the “run list”) that apply, and then running all of the cookbook recipes in the run-lists&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve glossed over quite a few things here, but the overall strategy is that the Chef agent transforms the node into the state you want. Sometimes this takes multiple passes through the run-list, although the Chef agent is generally smart enough to figure out how to manage dependencies without intervention. That is why Chef uses the term “converge” to describe how the node morphs into the desired state. Nodes need not be clones of each other, and indeed Chef can be injected into existing systems long after they are created. One might say that the Chef philosophy is exactly the opposite of the traditional “golden image” concept where every system is an exact copy of every other. It is more correct to say that with Chef, every package and application within scope — those you have created cookbooks for — is &lt;em&gt;configured&lt;/em&gt; in exactly the way you expect. Chef stresses &lt;em&gt;idempotency&lt;/em&gt; — a fancy way of saying that when you execute the run-list on multiple nodes, you get the same result every time. For the curious, Sean O’Meara provides an excellent overview of Chef &lt;a href=&quot;http://blog.afistfulofservers.net/post/2011/03/16/a-brief-chef-tutorial-from-concentrate/&quot;&gt;on his blog&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;chef-tools-for-cooking-in-the-kitchen&quot;&gt;Chef tools for cooking in the kitchen&lt;/h1&gt;
&lt;p&gt;Chef includes several components that work together to produce consistent results every time:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Knife&lt;/strong&gt;, a command-line workhorse that you use to create, download, edit and upload cookbooks, clients, nodes, roles and environments. &lt;em&gt;Clients&lt;/em&gt; are the workstations that edit Chef configurations. &lt;em&gt;Nodes&lt;/em&gt; are the machines that Chef produces. &lt;em&gt;Roles&lt;/em&gt; are run-lists of cookbooks and configs for a common purpose, for example, a role called “webserver” with cookbooks and properties for Apache, PHP, CGI, and your company’s standard HTML chrome. &lt;em&gt;Environments&lt;/em&gt; are variations on either global configurations or roles for specific situations, for example “development,” “production,” etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Chef-server&lt;/strong&gt;, which serves as a master repository for your cookbooks, property files, and lists of clients, nodes and environments. You can set up your own server by downloading and running the community open source version. OpsCode also provides a &lt;a href=&quot;http://www.opscode.com/enterprise-chef/&quot;&gt;hosted option called Enterprise Chef&lt;/a&gt;, which is free when used with five nodes or less.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Public/private keys&lt;/strong&gt;, which allow clients, nodes and servers to authenticate each other without needing passwords. When your initial account is created on Chef server via the web GUI, the server creates a key-pair. The private half is added to a zipped download bundle that is expanded on the client into a directory. The client directory is then checked into Git (keying materials are &lt;em&gt;not&lt;/em&gt; checked in). Whenever Knife is executed, it uses the private key to authenticate with the server first. The client bundle also includes a “validation key,” which is copied to new nodes at the time of creation. This validation key is used to initiate a key-exchange process with the server to create a node-specific key, after which point the validation key can be removed from the node.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Resource providers&lt;/strong&gt;, which perform tasks listed in cookbook scripts. These &lt;a href=&quot;http://docs.opscode.com/resource.html&quot;&gt;providers&lt;/a&gt; allow Chef cookbook commands to remain relatively abstracted from the underlying OS commands. For example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; resource provider invokes the package managers on various systems (&lt;code class=&quot;highlighter-rouge&quot;&gt;yum&lt;/code&gt; for Red Hat or CentOS, &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; for Debian-style Linuxes etc). Creative combinations enable interesting results: for example, you can populate directories on target nodes with Git checkout contents. If you had previously versioned website page contents, contents, creating an up-to-date static webserver can be done automatically by causing it to pull the latest content from the master repo — a neat trick.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Community site&lt;/strong&gt;, which hosts cookbooks from OpsCode and third parties, saving you the trouble of writing your own cookbooks. The &lt;a href=&quot;http://community.opscode.com/cookbooks/apache2&quot;&gt;Apache cookbook&lt;/a&gt;, for example, is extremely complete and allows for flexible customization. I have not finished fooling around with it yet in my own experiments, but the properties files allow for quite a bit of hardening; you can specify which Apache modules to include and exclude, create website aliases, map directories and do many of the things that old Apache-tuners like me have been doing by hand for years. As you might expect, the degree of configurability for any particular cookbook varies greatly depending on the skill of the author and amount of iterative refinement the cookbook recipes have received over time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to its own components, Chef also makes good use of a few other key tools that you might be familiar with, chiefly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt;, the distributed version control system at the epicenter of the DevOps movement. When you create a new Chef project, the first thing you usually do is commit the new project into a local &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git repository&lt;/a&gt;. At that point, you can easily create and link to a remote repository so that changes to the project are appropriately versioned centrally. As noted above, client-side keying materials are not automatically versioned; they are part of the default &lt;em&gt;.gitignore&lt;/em&gt; file initially downloaded from the server.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vagrant&lt;/strong&gt;, a command-line utility for managing virtual machines. &lt;a href=&quot;http://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; allows you to download and cache a pristine community machine image, which can be quickly spun up,  bootstrapped with Chef, and destroyed. The default VM image type is Oracle’s VirtualBox, but Vagrant can also manage VMWare, Amazon and Rackspace images. With VirtualBox images, Vagrant can also manage networking settings so that it is easy to create test machines on your laptop. Using Chef and Vagrant together,  for example, I was able to create a new virtual machine, bootstrap it with Chef, and converge it to a desired Apache state in about 30 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;implications-for-security&quot;&gt;Implications for security&lt;/h1&gt;
&lt;p&gt;So, why is a security guy like me fooling around with Chef, and what are the implications for security? Here’s what I like about it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Infrastructure as code&lt;/strong&gt;. I really like how you can create and manage machines essentially as code. I do a fair amount of programming as an after-hours “professional hobby,” so it is great to be able to use some of the same tools and languages (notably Git and Ruby) here also.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Clever crypto&lt;/strong&gt;. The mutual authentication system using naked public/private keys is clever. I’ve always felt that for the sorts of things Chef does, certificates would be too heavyweight and too much bother. While it is true that the client-side private key is not, by default, protected with a password, one can easily be added. The no-password default, however, does strike a nice balance of making it easy to communicate with Chef server without needing to worry too much. As long as the client node is protected, subversion isn’t a huge worry.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stepwise assimilation&lt;/strong&gt;. I like how Chef can be added to an existing machine so that it can be massaged into the desired state. When I have a little more time, I plan to perfect my Apache cookbook adaptations and converge my existing &lt;a href=&quot;http://www.securitymetrics.org&quot;&gt;securitymetrics.org&lt;/a&gt; server into it. That would allow me to quickly recreate the web-server parts of the site if it got 0wned. I keep a rather long list of anal-retentive instructions for hand-tuning the Apache, Mailman, Logwatch, SSHD, etc. I intend to gradually move each of these items under Chef control. Gradual assimilation is nice, because it easier for most organizations to implement rather than focusing on big-gulp “golden image” projects.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Baked-in security possibilities&lt;/strong&gt;. As you might imagine, the ability to converge nodes into predictable and known states is Chef’s strong point. If you are a security professional who believes in Building Security In (“Mr McGraw, white courtesy phone…”), Chef gives you powerful tools in service of that goal. Through Chef, cookbooks, services and applications can be &lt;a href=&quot;http://docs.opscode.com/resource_service.html&quot;&gt;minimized&lt;/a&gt;. Key exposures can be limited via existing cookbooks or through custom ones that you may create.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;key-caveats-when-working-with-chef&quot;&gt;Key caveats when working with Chef&lt;/h1&gt;
&lt;p&gt;So, that’s what I like about Chef. However, Chef has some important limitations that security professionals must keep in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Chef’s frame of reference is that of an Agile developer&lt;/strong&gt;, not that of a system administrator or a security pro. Cookbooks and recipes, and infrastructure-as-code are powerful metaphors, but they are different than those used by traditional configuration management tools. There is no concept of a CMDB other than in a very loose sense — the Chef server data and any projects managed by Git. Using Chef effectively requires you tho think like a developer. In companies where Agile or Lean has taken root — where development and operations are tightly coupled in a common workflow — this is a plus. But shops that aren’t fully wedded to the DevOps philosophy are likely to find Chef’s mindset a little alien.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Chef’s learning curve is steep and can lock you in&lt;/strong&gt;. Chef property files and cookbook scripts are nothing more than stock Ruby files arranged in specific directory layouts and used in specific ways. Consequently, mastering Chef requires one to &lt;a href=&quot;http://docs.opscode.com/just_enough_ruby_for_chef.html&quot;&gt;learn a bit of Ruby&lt;/a&gt;. Personally, I’ve found Ruby easier to learn than Perl or Bash (neither one of which I like very much). It allows me to express intent more simply and in a more compact fashion. What it means is that if you are a security or infrastructure professional who wants to build security in, you will have to roll up your sleeves a bit and learn a new language. Your investment in learning Chef and Ruby will lead to increased lock-in, which is &lt;em&gt;usually&lt;/em&gt; a good thing. Certainly, it is better than the alternatives — rat’s nests of Perl, Bash, wikis and READMEs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Chef’s documentation is average for open projects&lt;/strong&gt;, with the pluses and minuses this implies. OpsCode offers a licensing and support model similar to other hybrid companies: the source code is freely available for most components; licensing is generous and corporate-friendly (Apache 2.0 license); and a vibrant community helps newbies ascend the initial learning curves. If you want support you have to pay. For those who want to self-support, documentation is on par but not dramatically better than many open source projects: it covers basic use cases well, but minor deviations from potted plots cause hiccups. In my own experiments, for example, a server node wasn’t converging as it should have because &lt;code class=&quot;highlighter-rouge&quot;&gt;chef-client&lt;/code&gt; wasn’t running as root. Error messages were cryptic and shed no light on the cause. Attempting to reinitialize the master workstation client made matters worse because I erased my private keys. I eventually figured out what was going on, but only through logical deduction rather than consulting the documentation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Chef is server-centric&lt;/strong&gt;, and won’t help you converge state on other types of devices, such as routers, load-balancers or databases. For those whose ambitions extend to automating the configuration of entire virtual or physical environments, you will need to bolster Chef with other tools. That isn’t necessarily a minus, but it does mean that Chef is only good at the things it is meant to be good at. It won’t be the only tool in your bag.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;alternatives-to-chef&quot;&gt;Alternatives to Chef&lt;/h1&gt;
&lt;p&gt;As Sean’s blog points out, &lt;a href=&quot;http://blog.afistfulofservers.net/post/2011/12/30/cfengine-puppet-and-chef-part-1/&quot;&gt;Chef is not the only game in town&lt;/a&gt;. Puppet serves a similar role for many companies, and its design philosophy is close to that of Chef. Both were inspired by CFEngine. I chose to experiment with Chef because I felt it had more polish and refinement than Puppet. I have no idea whether this is actually true or not. At a certain point, it does not matter. Whether you like Chef, Puppet or CFEngine, the point is to try them out and see where it takes you. I am quite pleased so far with Chef and look forward to using it more with my own projects. I will post more details in future blog posts.&lt;/p&gt;

&lt;p&gt;If you are a security or infrastructure who is working with Chef or similar tools, I would love to hear about you experiences. Add a comment or send me an email!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image copyright 2016 by Kharnagy, licensed under the Creative Commons Attribution-Share Alike 4.0 International license.&lt;/em&gt;&lt;/p&gt;</content><author><name>arj</name></author><summary type="html">Lately I have been spending a lot of time with a new best friend. This new friend is reliable; he does everything according to plan and always exactly the same way. The results are exactly the same every time, too. And he speaks to me in a language that I understand — the language of food.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/512px-Devops-toolchain.png" /></entry><entry><title type="html">New Web Adventures with Heroku</title><link href="/blog/2013/08/26/new-web-adventures/" rel="alternate" type="text/html" title="New Web Adventures with Heroku" /><published>2013-08-26T08:55:00-04:00</published><updated>2013-08-26T08:55:00-04:00</updated><id>/blog/2013/08/26/new-web-adventures</id><content type="html" xml:base="/blog/2013/08/26/new-web-adventures/">&lt;p&gt;Many ardent followers of this blog know that among other things, one of my professional hobbies is application development. I am a “weekend programmer.” I always have a side project or two going, but do not professionally program (much) as part of my day job. That’s not necessarily for lack of talent (cough), but for lack of desire to make my living from it. That said, as the CTO of a cloud security software company, it’s rather good to know how software is built these days. As a bonus, by staying close to dev via a hobby or two, I can relate better to my colleagues who actually do make their living from programming.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;I have been programming most of my life. I learned to program around age 11 on time-sharing systems, and then later, on the Apple II+ and the PDP 11-44. My high-school computer science team was nationally ranked, usually #1 or #2 in the country, and I scored well enough on my high school Advanced Placement (AP) test — 5 on a 5 scale — to waive all of my college science requirements in college. I could have majored in computer science but chose economics and political science instead, with huge dollops of Japanese and architecture on the side. I took just one computer science class in college — for fun — as a senior. It was CS 201, the hard-core freshman course for future majors. The course focused on LISP. I hated it, frankly, because Lisp is a weird language, and because all of my 201 classmates were jumping with both feet into their future majors and left me breathing their dust. As a result, I found myself — for the first time in my life — on the ass end of the grading curve. That aside, I got my first consulting gigs after college as a programmer, and have kept coding, on-and-off, ever since.&lt;/p&gt;

&lt;p&gt;A few of my “weekend projects” have been more than that. For example, in the early 2000s I became enamored of Java 2 Enterprise Edition (J2EE) in general, and with a Java-based wiki software package (JSPWiki) in particular. I didn’t like JSPWiki’s security model and volunteered to re-write it. That was fun. Five years later, I had contributed about 100,000 lines of code, added LDAP and database authentication, re-wrote the authorization system, given it a new front end based on &lt;a href=&quot;http://www.stripesframework.org/display/stripes/Home&quot;&gt;Stripes&lt;/a&gt;, and helped incubate it into a &lt;a href=&quot;http://jspwiki.apache.org&quot;&gt;top-level Apache Software Foundation project&lt;/a&gt;. By that time, I had essentially become the co-lead on the project with my colleague &lt;a href=&quot;http://www.ecyrd.com/ButtUgly/&quot;&gt;Janne Jalkanen&lt;/a&gt;. But I found that I was no longer using the software day-to-day, and other life priorities intervened (marriage and a job change). So I retired from JSPWiki.&lt;/p&gt;

&lt;p&gt;More recently, I have indulged interests in two areas: mobile development — iOS in particular — and &lt;a href=&quot;http://www.markerbench.com/blog/2013/01/17/phoenix/&quot;&gt;Dev Ops&lt;/a&gt;. In the mobile realm, I have been working on-and-off on an ambitious (too ambitious?) productivity app that will address a need that everyone has.&lt;/p&gt;

&lt;p&gt;On Dev Ops, I have lately been fooling around with some of the build-automation and hosting frameworks. &lt;a href=&quot;http:///www.heroku.com&quot;&gt;Heroku&lt;/a&gt; is my current preoccupation. It combines server-side build automation with hosting. What that means is that developers can write code in their language of choice using a Heroku-mandated directory structure and packaging specification. Developers check in their code to Heroku’s servers using &lt;a href=&quot;http://git-scm.com&quot;&gt;Git&lt;/a&gt;. When the code is checked in, Heroku packages the app based on the packaging document — called a &lt;em&gt;Procfile&lt;/em&gt; — and deploys it in one or more web servers, depending on how much scalability the customer pays for. Heroku also offers a pre-configured private SQL database (Postgres), which developers can use for application data storage. As a bonus, Heroku offers a downloadable set of command-line utilities called &lt;a href=&quot;https://toolbelt.heroku.com&quot;&gt;Toolbelt&lt;/a&gt; that allow the server-side environment to be simulated and tested on the client. Best of all, Heroku offers compute time on one server — which they call a &lt;a href=&quot;https://devcenter.heroku.com/articles/dynos&quot;&gt;&lt;em&gt;dyno&lt;/em&gt;&lt;/a&gt; — more-or-less for free, assuming the cycles don’t exceed a relatively generous threshold.&lt;/p&gt;

&lt;p&gt;From the developer’s perspective, Heroku is pretty great. Code is effortlessly deployed when it’s checked in. One simply pushes the latest code to Heroku using the usual method — &lt;code class=&quot;highlighter-rouge&quot;&gt;git push heroku master&lt;/code&gt;. Heroku’s server-side hook detects the check-in, builds the deployment bundle (what Heroku calls a _slug) and deploys it on the dyno(s) in a few seconds. All of the most popular server-side development stacks are supported: &lt;a href=&quot;https://devcenter.heroku.com/articles/intro-for-java-developers&quot;&gt;JEE&lt;/a&gt;, &lt;a href=&quot;https://devcenter.heroku.com/articles/ruby-support&quot;&gt;Ruby + Rails&lt;/a&gt;, &lt;a href=&quot;https://devcenter.heroku.com/articles/rack&quot;&gt;Ruby + Sinatra&lt;/a&gt;, &lt;a href=&quot;https://devcenter.heroku.com/articles/play-support&quot;&gt;Java + Play&lt;/a&gt;, &lt;a href=&quot;https://devcenter.heroku.com/articles/scala-support&quot;&gt;Scala&lt;/a&gt;, &lt;a href=&quot;https://devcenter.heroku.com/articles/nodejs-support&quot;&gt;Node.js&lt;/a&gt;, &lt;a href=&quot;https://devcenter.heroku.com/articles/clojure-support&quot;&gt;Clojure&lt;/a&gt;, &lt;a href=&quot;https://devcenter.heroku.com/articles/python-support&quot;&gt;Python + Django&lt;/a&gt; and many more. There’s a &lt;a href=&quot;https://devcenter.heroku.com/categories/heroku-postgres&quot;&gt;Postgres database in the cloud&lt;/a&gt; that is pre-provisioned for each application and is just “there” waiting to be used. A &lt;a href=&quot;https://addons.heroku.com&quot;&gt;vibrant ecosystem&lt;/a&gt; allows third parties to offer NoSQL, monitoring and other services. Server scaling is merely a question of pulling out a credit card and buying some more incremental compute cycles. The documentation is simple and clear. And Heroku’s command-line Toolbelt tools make everything very, very easy and quick.&lt;/p&gt;

&lt;p&gt;What it all means is that developers can create, deploy, test and use low-volume web applications without spending a dime. Other than typing a few initial Toolbelt commands, everything else is done using their everyday workhorse, Git. The infrastructure is completely abstracted so that pushing an app out to the Internet is as simple as typing the words &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All of which ought to be terrifying for security managers.&lt;/p&gt;

&lt;p&gt;From the big picture perspective, Heroku represents a complete rethink, and outsourcing of, the entire application development stack. That it can all be done for free — at least, for the first hit — means that Heroku and providers that offer similar stacks (CloudBees, Joyent, Engine Yard) create a natural alternative to traditional IT for prototyping, experimentation, and possibly, deployment.&lt;/p&gt;

&lt;p&gt;We can take this one step further. What Heroku and services like it means is that in the future, IT will remain relevant only if it can continue to engender respect with developers. If IT insists on being a roadblock — for example, if it can’t or won’t buy prototyping servers fast enough, imposes uninformed mandates about “company standard” frameworks, continues to require CVS (shudder) or SVN (wince) rather than Git, or breaks out in hives at the mention of this newfangled Hadoop thingy — it will create economic incentives for developers to look elsewhere. By “IT” I mean it as an aggregate entity — the architect rule-setters, security-gate-keepers and purse-string-holders that collectively and emergent-ly determine how applications are made and where they run.&lt;/p&gt;

&lt;p&gt;In my next post, I’ll offer some perspective on some of my experiments with the &lt;a href=&quot;http://www.playframework.com&quot;&gt;Play Framework&lt;/a&gt;, a radical re-think of Java that offers a compelling alternative to traditional JEE applications. My occasional correspondent and Twitter friend &lt;a href=&quot;http://www.jroller.com/robwilliams/category/Java&quot;&gt;Rob Williams&lt;/a&gt; turned me on to Play. It can be deployed quickly and simply on Heroku. I’ll have some observations shortly.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image copyright 2016 by Kharnagy, licensed under the Creative Commons Attribution-Share Alike 4.0 International license.&lt;/em&gt;&lt;/p&gt;</content><author><name>arj</name></author><summary type="html">Many ardent followers of this blog know that among other things, one of my professional hobbies is application development. I am a “weekend programmer.” I always have a side project or two going, but do not professionally program (much) as part of my day job. That’s not necessarily for lack of talent (cough), but for lack of desire to make my living from it. That said, as the CTO of a cloud security software company, it’s rather good to know how software is built these days. As a bonus, by staying close to dev via a hobby or two, I can relate better to my colleagues who actually do make their living from programming.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/512px-Devops-toolchain.png" /></entry><entry><title type="html">Review of Stephen Few’s “Information Dashboard Design, Second Edition”</title><link href="/blog/2013/08/13/my-kind-of-cranky/" rel="alternate" type="text/html" title="Review of Stephen Few&amp;rsquo;s &amp;ldquo;Information Dashboard Design, Second Edition&amp;rdquo;" /><published>2013-08-13T23:01:00-04:00</published><updated>2013-08-13T23:01:00-04:00</updated><id>/blog/2013/08/13/my-kind-of-cranky</id><content type="html" xml:base="/blog/2013/08/13/my-kind-of-cranky/">&lt;p&gt;Twenty years ago, a polymath prophet named &lt;a href=&quot;http://www.edwardtufte.com&quot;&gt;Edward Tufte&lt;/a&gt; self-published an incendiary book, &lt;em&gt;&lt;a href=&quot;http://www.amazon.com/Visual-Display-Quantitative-Information/dp/096139210X&quot;&gt;The Visual Display of Quantitative Information&lt;/a&gt;&lt;/em&gt;. It forever changed how a certain species of white-collar professional viewed the world. As a DNA-tested, confirmed member of the species &lt;em&gt;homo visualis&lt;/em&gt;, I can tell you that his book, and successors such as &lt;em&gt;&lt;a href=&quot;http://www.amazon.com/Envisioning-Information-Edward-R-Tufte/dp/0961392118&quot;&gt;Envisioning Information&lt;/a&gt;&lt;/em&gt;, taught me how to create strong, effective statistical graphics. Tufte introduced the concepts of &lt;em&gt;chart junk,&lt;/em&gt; the &lt;em&gt;data-to-ink ratio,&lt;/em&gt; &lt;em&gt;small multiples&lt;/em&gt; and &lt;em&gt;sparklines&lt;/em&gt;. He argued forcefully and persuasively that designers of statistical graphics need not condescend to their audiences. And perhaps most important, he inspired a generation of authors, professionals and scientists — call them “Tuftees” — to strive for simplicity, clarity and honesty in their representations of data.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Indeed, in my book &lt;em&gt;&lt;a href=&quot;http://www.amazon.com/Security-Metrics-Replacing-Uncertainty-Doubt/dp/0321349989&quot;&gt;Security Metrics: Replacing Fear, Uncertainty, and Doubt&lt;/a&gt;,&lt;/em&gt; I wrote an entire &lt;a href=&quot;http://my.safaribooksonline.com/book/networking/security/9780321349989/visualization/ch06&quot;&gt;40-page chapter&lt;/a&gt; on how to graphically present security data. That chapter owes everything to Tufte. I mention my own book not out of a desire to gratuitously promote it (not that there’s anything wrong with that), but because in the 2nd edition of Stephen Few’s &lt;em&gt;&lt;a href=&quot;http://www.amazon.com/Information-Dashboard-Design-At---Glance/dp/1938377001/&quot;&gt;Information Dashboard Design: Displaying Data for At-A-Glance Monitoring&lt;/a&gt;&lt;/em&gt; I can sense exactly why and how Mr Few was driven to write his own book about visualization.&lt;/p&gt;

&lt;p&gt;In my case, I felt compelled to summarize quickly everything I had learned about effective graphical techniques, because I wanted to help security professionals create exhibits that weren’t awful. After I put fingers to keyboard to write the chapter, though, I found it hard to stop writing. No treatment of security metrics would be complete without an honest discussion of visualization techniques, and that took space and length to do well. Cranky about the state of graphical practice in my own industry, and lacking decent models to point others at, I decided to build some of my own, often imperfect, models. (&lt;a href=&quot;http://my.safaribooksonline.com/book/networking/security/9780321349989/visualization/ch06&quot;&gt;&lt;em&gt;Really cranky&lt;/em&gt;&lt;/a&gt;, too: after re-reading chapter 6, it’s a wonder Addison-Wesley let me publish the book at all!) In short, pissyness led to something productive.&lt;/p&gt;

&lt;p&gt;You can smell the same faint alternating whiffs of frustration and hope in Mr Few’s book, too. He’s my kind of cranky. He’s a Tuftee. The first half of the book, about 110 sparse pages, focuses on what &lt;em&gt;not&lt;/em&gt; to do when designing dashboards. Dozens of examples of bad dashboards fill the first hundred pages. I can only imagine the nightmare of getting screenshot copyright clearances from the vendors whose products he made examples of.&lt;/p&gt;

&lt;p&gt;But despite the sport he has with the screenshots, &lt;em&gt;Information Dashboard Design&lt;/em&gt; also grounds practitioners in the basics. Few defines a &lt;em&gt;dashboard&lt;/em&gt; as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…a visual display of the most important information needed to achieve one or more objectives, consolidated and arranged on a single screen so that the information can be monitored at a glance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That is nicely said. Building on this fundamental definition, the first half of the book covers these additional topics:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Clarifying the Vision&lt;/strong&gt;: What is a dashboard? Why do we use them?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Thirteen common mistakes in dashboard design&lt;/strong&gt;: exactly what you’d imagine; this is a regular rogues gallery&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Assessing what’s needed&lt;/strong&gt;: what people need when they see a dashboard&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fundamental considerations&lt;/strong&gt;: how frequency of use, screen sizes, and data types influence dashboard design&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tapping into the power of visual perception&lt;/strong&gt;: how we can use what we know about cognition to improve perception of dashboards&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Achieving eloquence through simplicity&lt;/strong&gt;: A Tufte-inspired discussion of maximizing the data/ink ratio, and of getting rid of filler and unnecessary ornamentation&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Advantages of graphs&lt;/strong&gt;: why pictures are worth a thousand words&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The remainder of the book covers putting theory into practice. I have not read these chapters yet, but am looking forward to them.&lt;/p&gt;

&lt;p&gt;If you are a Tuftee, you won’t find much in the first half of Mr Few’s book that breaks new ground. At least, not as of 2013. But then again, in 2006, this book was a big deal. It was well-received, sold well enough to merit a second edition, and has been widely cited since.&lt;/p&gt;

&lt;p&gt;I admire Mr Few very much for writing this book. I don’t get the impression that he was a graphic designer by training. Nor does he appear to have an economics or statistics degree — indeed, I can’t find a résumé or LinkedIn profile anywhere. And he’s not a programmer. Not that any of that matters. Few is clearly a fanatic; he won’t change his mind, and won’t change the subject.&lt;/p&gt;

&lt;p&gt;The principles in this book don’t apply just to dashboards, however. Every business professional who creates &lt;em&gt;any&lt;/em&gt; kind of chart or exhibit can benefit from this book. I can say that with a high level of confidence — and I haven’t even gotten to the really good bits yet.&lt;/p&gt;

&lt;p&gt;Stay tuned for my review of the second half of the book.&lt;/p&gt;</content><author><name>arj</name></author><category term="featured" /><summary type="html">Twenty years ago, a polymath prophet named Edward Tufte self-published an incendiary book, The Visual Display of Quantitative Information. It forever changed how a certain species of white-collar professional viewed the world. As a DNA-tested, confirmed member of the species homo visualis, I can tell you that his book, and successors such as Envisioning Information, taught me how to create strong, effective statistical graphics. Tufte introduced the concepts of chart junk, the data-to-ink ratio, small multiples and sparklines. He argued forcefully and persuasively that designers of statistical graphics need not condescend to their audiences. And perhaps most important, he inspired a generation of authors, professionals and scientists — call them “Tuftees” — to strive for simplicity, clarity and honesty in their representations of data.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/few.jpg" /></entry><entry><title type="html">Cybersecurity for Machine-to-Machine (M2M) Networks</title><link href="/blog/2013/06/04/tia-m2m-talk/" rel="alternate" type="text/html" title="Cybersecurity for Machine-to-Machine (M2M) Networks" /><published>2013-06-04T00:00:00-04:00</published><updated>2013-06-04T00:00:00-04:00</updated><id>/blog/2013/06/04/tia-m2m-talk</id><content type="html" xml:base="/blog/2013/06/04/tia-m2m-talk/">&lt;p&gt;&lt;em&gt;This is the nominal text of panel remarks I delivered at the Telecommunications Industry Association’s M2M &amp;amp; Cybersecurity Workshop on June 4th, 2013. The objective of the panel was to discuss the following topic:&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Define a cohesive vision for a secure, reliable and economically viable machine network. What are the key objectives and what level of risk can be tolerated?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good afternoon. I am Andrew Jaquith, the CTO of SilverSky, a leading cloud security provider. It’s great to talk to you today. You may not know SilverSky, so first, a little about us and our qualifications:&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul&gt;
  &lt;li&gt;SilverSky protects our customers’ most important information. We manage customers’ email and collaboration, secure their data with our security software, and monitor their infrastructure for compromises, all from our cloud.&lt;/li&gt;
  &lt;li&gt;We have 6000 customers, mostly in the private sector, including 1800 in the most risk averse and security sensitive industry there is: financial services
We filter 50 million emails a day, and analyze 425 million security events&lt;/li&gt;
  &lt;li&gt;We protect half a trillion in banking and financial assets&lt;/li&gt;
  &lt;li&gt;We have a growing presence in telecommunications and communications service providers. We partner with Cbeyond, Telepacific, NTT, Windstream and — thanks to an an acquisition we are announcing tomorrow — with XO and Peak10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While we aren’t a device maker or carrier ourselves, we see a large volume of network traffic and security events every day. We see a lot of activity and have an perspective of what’s going on in the private sector.&lt;/p&gt;

&lt;p&gt;Let’s talk about machine-to-machine (M2M). M2M means any digital, network-protected device that is part of a larger system. The “M” in M2M means something with an IP address. Everything from ATM machines to smartphones to copiers to energy grid sensors to that networked refrigerator we’ve all been predicting — at least, ever since MIT networked its soda machine in the early 1990s. I remember as a young pup around 1993 when Novell predicted that one day, there would be 1 billion network-connected devices. That prediction seemed audacious then; it is merely quaint now.&lt;/p&gt;

&lt;p&gt;The “2M” part of M2M means that connected thing is a node in a larger network, and that the communications are only partially directed by a human. A consumer, for example, might own a mobile phone. They will surf the web, buy their kids gifts on Amazon, and play Words with Friends with, well, their friends. There’s nothing about these activities that is different or more interesting than what we have seen on the PC. However, all of the supporting services underpinning the mobile experience — cellular data communications, background telemetry, push notifications, carrier updates — that is all M2M traffic. So are the networked soda machine replenishment signals, SCADA traffic, the cellular tower updates, etc. These are not initiated by humans; these are all machines talking to machines.&lt;/p&gt;

&lt;p&gt;The reason we are all here: talking about security in M2M. We are here, I think, because so much of what we experience and take for granted every day relies on networking; that is, the “2M” part. Increasingly, all of that networking is under the covers, and not directly perceived or controlled by the consumer or end customer. It is of paramount importance, therefore, that we can trust the networks, devices, clouds and data that underpin the M2M economy. We need to trust the things that filter the water we drink, transmit the power we consume, and connect us to other people.&lt;/p&gt;

&lt;p&gt;What is does success at securing M2M look like? With something as diverse as M2M, one cannot easily articulate a “vision” for security. There is no single “system” one can articulate a vision for. It’s a “system” in the same way that health care is a system: fragmented, partly analog, few standards, and filled with many parties with competing interests.&lt;/p&gt;

&lt;p&gt;But the need is clear. Risks abound across the system. A popular grey-hat security research project, for example, has released automated exploits for SCADA systems from Rockwell, GE, Schneider, Siemens and many others — making it relatively easy for attackers to weaponize and use on a large scale. Scary. And these are people who are supposed to be our friends. Then there are those who are not our friends: nation-states such as China, Russia and Iran, which have funded large offensive cyber-warfare teams. It is certain that M2M systems are on the target list.  Rounding out the list of threat actors includes the usual criminal gangs, unsavory hackers, miscreants, attention-seekers, pirates and — arguably the worst of the bunch — Mr Murphy (as in Murphy’s Law).&lt;/p&gt;

&lt;p&gt;So, defining a vision for M2M is arguably a fool’s errand. That said, if I could suggest one big hairy audacious goal for M2M security, it would be this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The absence of surprise&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“Surprise” in the context of M2M means disrupted business, theft of service, successful attacks on critical infrastructure, civil unrest, loss of life or livelihood, theft of secrets or corrupted data. Drilling down a bit more, “absence of surprise” implies four other goals. It implies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Designing for failure&lt;/em&gt;: having compensating processes for dealing with compromises&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Designing for resilience&lt;/em&gt;: making it possible to diagnose, upgrade in the field, and have robust functions in less-than-optimal environments&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Eternal vigilance&lt;/em&gt;: having a strategy for continuous monitoring; for incident handling, and for response activities (often neglected)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Risk management&lt;/em&gt;: eyes-open knowledge of what adverse events are acceptable, and how frequently they can be tolerated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me illustrate by example. Ten years ago I helped design of a security subsystem for some hardware devices due to be deployed by one of the most zealous and security conscious organizations around. This organization would do just about anything to ensures that their mission was achieved, that their devices were not compromised, and that they were as protected as possible from the threat posed by attackers. No, I’m not talking about the military, the CIA, or the NSA. I’m talking about cable TV.&lt;/p&gt;

&lt;p&gt;The job was to design Comcast’s next-generation conditional access system (called DCAS aka True Thru-Way). What was the goal? To design a bulletproof CAS that would securely deliver any programming of the customer’s choice, so they could get anything they wanted &lt;em&gt;and&lt;/em&gt; paid for. &lt;em&gt;But&lt;/em&gt; — and this is important — not what they didn’t pay for. Also: nobody else could get the programming without paying either. The system we designed had a three key features designed to advance this goal:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Device integrity&lt;/em&gt;: keep the device in a known state. This implied that we needed not just a way of keeping a set-top box (STB) from being tampered with, but a way of knowing when it was being tampered with.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Content protection&lt;/em&gt;: require encryption between the cable network head end and the STBs. A strategy for hardening the box. Creating a cryptographic “key ladder” with long-lived session keys and ephemeral ones, so that compromising a more frequently used key meant a finite window of time for the compromise. We also needed “secure elements” on the box that would be “personalized” for each unit.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Device updates&lt;/em&gt;: develop a way of revving the local STB firmware and updates. That implied having a “root of trust” derived from keys that were managed centrally. We know from watching the experiences of DirecTV (and today, Apple) with “hackers” that adversarial warfare with determined opponents makes defenders stronger.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What this meant in our case: lots of crypto. Serious review and iteration. Willingness to learn through evolution. Knowing that you have to walk a fine line between between security robustness, flexibility, usability and ability to manage at scale in the field. Perhaps most important: all of the design decisions were informed by an acceptance by Comcast of exactly how hard it ought to be for a pirate to pop a box and get free TV. How hard should it really be, and what would the company tolerate? Also, Comcast defined which “tail risks” they wanted to avoid. That is, what does catastrophic failure look like? In this case, just for example, Comcast wanted to make sure that other than stealing the topmost root key — which was made very, very difficult — no mass compromise was possible; an attacker would have to go box-by-box.&lt;/p&gt;

&lt;p&gt;This should give you an idea of what is required to build devices with high levels of security, where that security supports the business goal. For a more modern example, look at Apple’s iPhone. That is a great example of fairly robust security and usability. Fifteen years ago, if I told you that you would see the rise of a consumer computing platform with over 500 million units deployed, where the entire platform includes trusted boot, mandatory access control, full device encryption, mandatory application screening, mandatory application signing from a central authority, a vibrant developer scene, and very little (essentially zero) malware, and one that doesn’t drive customers batty — indeed is one heck of a pleasure to use — you’d say I was nuts. But yet that’s what we have. I don’t advocate Apple’s model &lt;em&gt;per se&lt;/em&gt;. But it illustrates one way to try to accomplish many goals, and do them all well enough that the net risk to consumers is very low.&lt;/p&gt;

&lt;p&gt;On the other side, look at what happened with Stuxnet. The attack was essentially via USB stick plus a stealthy worm that attacked Siemens SCADA systems used to control and monitor centrifuges for enriching uranium. This system runs a variant of Windows. Very few of the ideal security characteristics one would like to see in a robust, secure embedded operations system were in place in this case. (Arguably in the case of Stuxnet this was a feature rather than a bug.)&lt;/p&gt;

&lt;p&gt;My wish for the industries that are involved in M2M, looping back to my original comment, is that we design collectively and individually for the absence of surprise. Any surprises you get should be those you expect… And then, of course, they aren’t surprises. They fall into the category of what Donald Rumsfeld memorably called “known unknowns.” Our eyes are wide open, based on enlightened economic self interest. In addition, I would hope that have enough eyes wide open that many of the “unknown unknowns” are imagined as well.&lt;/p&gt;

&lt;p&gt;That won’t be good enough in all cases, though. In closing, we will need to consider incentives to swing the calculus to align economic self interest with good security outcomes. Speaking as a trained economist who works in the security field (and who programs to relax), almost all security failures are rooted in perverse economic incentives. Our goal ought to be to align incentives so we get better outcomes. In my view, everything should be on the table: software security liability for manufacturers, legal shielding for sharing of security data and incidents, promotion of industry standards and inclusion of these standards in purchasing guidelines, and, in cases where the risks demand it, regulation or legislation.&lt;/p&gt;

&lt;p&gt;If we do all of these things, we will have successfully used our collective imaginations to identify, reduce, or willingly accept the M2M risks we face, both today and in the future.&lt;/p&gt;

&lt;p&gt;Thanks very much for listening.&lt;/p&gt;</content><author><name>arj</name></author><category term="featured" /><summary type="html">This is the nominal text of panel remarks I delivered at the Telecommunications Industry Association’s M2M &amp;amp; Cybersecurity Workshop on June 4th, 2013. The objective of the panel was to discuss the following topic: Define a cohesive vision for a secure, reliable and economically viable machine network. What are the key objectives and what level of risk can be tolerated? Good afternoon. I am Andrew Jaquith, the CTO of SilverSky, a leading cloud security provider. It’s great to talk to you today. You may not know SilverSky, so first, a little about us and our qualifications:</summary></entry><entry><title type="html">“Everything was green. Mulally thought that was odd for a company losing billions.”</title><link href="/blog/2013/02/21/Mulally-leadership/" rel="alternate" type="text/html" title="&amp;ldquo;Everything was green. Mulally thought that was odd for a company losing billions.&amp;rdquo;" /><published>2013-02-21T00:00:00-05:00</published><updated>2013-02-21T00:00:00-05:00</updated><id>/blog/2013/02/21/Mulally-leadership</id><content type="html" xml:base="/blog/2013/02/21/Mulally-leadership/">&lt;p&gt;I have been a fan of the Ford Motor Company ever since I was a boy. There’s no rational reason for it, but then again, experts tell us that brand preferences are formed at very early ages. Somewhere around the age of 10 or so I decided I liked Ford cars. My first car after college was a 1993 Ford Taurus, which I later gave to my sister when I moved overseas. My second car was a 1998 Ford Contour. I changed to a nice little Honda Civic five years ago; at the time, the domestics weren’t looking so great. But I still have a certain patriotic wistfulness about Fords, and probably always will have. For this reason, I’ve been watching Ford’s recovery with interest.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Most people know that Ford didn’t take a dime in government money during the Great Recession. It was the only one of the Big Three automakers that did not. Much of the credit for this belongs to Alan Mulally, the CEO of Ford. He made the gutsy and prescient decision to take out a $23 billion loan two years before the recession hit. He used absolutely everything as collateral to get it, including the iconic blue oval logo. Since that time, Ford sold off its troubled and de-focusing Jaguar, Volvo and Aston-Martin luxury brands, built a terrific new line of fuel-efficient cars, whittled the number of cars “platforms” it used globally down to just a few, and steadily increased its car quality.&lt;/p&gt;

&lt;p&gt;Ford’s near-death experience – and subsequent rejuvenation – have been the subject of many case studies. A good short one, and the impetus for this post, is &lt;a href=&quot;http://www.bus.umich.edu/NewsRoom/ArticleDisplay.asp?news_id=25318&quot;&gt;“An Insider’s View of the Ford Story”&lt;/a&gt; from the Ross School of Business at the University of Michigan. In it, Ford COO Mark Fields tells a wonderful anecdote that most of us can relate to:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;At a weekly business status meeting early in Mulally’s tenure, charts from top executives didn’t indicate the company was in any trouble. Ford uses a color code for topics — green for good, yellow for a potential issue, red for a problem — and everything was green. Mulally thought that odd for a company losing billions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Meanwhile Fields, then president of the Americas, had an issue with a product launch that year. The new Edge had a liftgate problem that threatened to delay its critical debut.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I said, ‘Code it red,’ and they said, ‘Are you sure you want to do that?’,” Fields said. “I said, ‘This is what Alan wants. Let’s go for it.’”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Finally it was Fields’ turn — Edge launch: bright red. “I could feel the chairs move away from the table,” said Fields. “I said we have a problem, and I’d love to have help from manufacturing and quality to help resolve it. Alan turns to me and starts clapping. The next week, everybody’s chart was like a rainbow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By all accounts, Alan Mulally is a no-BS guy who does not fear hearing bad news. Indeed, everything I’ve read suggests that he &lt;a href=&quot;http://money.cnn.com/2009/05/11/news/companies/mulally_ford.fortune/&quot;&gt;encourages his staff to bring problems to the surface&lt;/a&gt; so that they can be discussed dispassionately and dealt with. Crucially, he encourages his team to do this without finger-pointing. At Ford, this has helped break through the factionalism that had traditionally plagued the company. As Fields puts it, “Working together has been so crucial for us to get through a very difficult time and work through our issues on our own.”&lt;/p&gt;

&lt;p&gt;As described in an older CNN Money story, establishing trust and a culture of openness was a big change. But there’s no doubt that the &lt;a href=&quot;http://money.cnn.com/2009/05/11/news/companies/mulally_ford.fortune/&quot;&gt;ultimate referee is Mulally&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are no pre-meetings or briefing books. “They don’t bring their big books anymore because I’m not going to grind them with as many questions as I can to humiliate them,” Mulally says. “We’ll see them next week. We don’t take action - I’m going to see you next week.” No BlackBerrys are allowed, and no side conversations either - Mulally is insistent about that. “If somebody starts to talk or they don’t respect each other, the meeting just stops. They know I’ve removed vice presidents because they couldn’t stop talking because they thought they were so damn important.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ford’s success isn’t solely due to the leadership qualities of the CEO, of course. Building better quality cars, after all, is the point of the whole exercise. That, the company has done well. But I love this story because it shows how setting the “tone at the top” matters, and that having a positive culture of problem-solving can (literally) &lt;a href=&quot;http://www.cbsnews.com/8301-34227_162-57563380/fords-souped-up-dividend-could-lure-new-investors/&quot;&gt;pay dividends&lt;/a&gt; all around.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Public domain photo by &lt;a href=&quot;https://georgewbush-whitehouse.archives.gov/news/releases/2007/03/20070320-7.html&quot;&gt;Eric Draper&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content><author><name>arj</name></author><category term="featured" /><summary type="html">I have been a fan of the Ford Motor Company ever since I was a boy. There’s no rational reason for it, but then again, experts tell us that brand preferences are formed at very early ages. Somewhere around the age of 10 or so I decided I liked Ford cars. My first car after college was a 1993 Ford Taurus, which I later gave to my sister when I moved overseas. My second car was a 1998 Ford Contour. I changed to a nice little Honda Civic five years ago; at the time, the domestics weren’t looking so great. But I still have a certain patriotic wistfulness about Fords, and probably always will have. For this reason, I’ve been watching Ford’s recovery with interest.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/mulally.jpg" /></entry></feed>